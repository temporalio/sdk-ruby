name: Build Native Extensions

on: # build when publishing a release
  release:
    types: [published]

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        ruby:
          - 3.0.5
          - 3.1.3
        os_arch:
          - ubuntu-x86
          - ubuntu-arm
          - macos-x86
          - macos-arm
        include:
          - os_arch: ubuntu-x86
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os_arch: ubuntu-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
          - os_arch: macos-x86
            os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
          - os_arch: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Add ${{ matrix.target }} rust target
        run: rustup target add ${{ matrix.target }}

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Print libc version
        run: ldd --version

      - if: ${{ matrix.os_arch == 'ubuntu-arm' }}
        name: Install gcc-aarch64-linux-gnu linker
        run: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: bridge
          key: ${{ matrix.os }}-${{ matrix.ruby }}-${{ matrix.target }}

      - name: Install ruby gems
        run: bundle install --jobs 4

      - name: Compile native extension
        id: package
        env:
          TARGET_ARCH: ${{ matrix.arch }}
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          bundle exec rake thermite:tarball
          echo temporal_sdk_ruby_bridge-*.tar.gz
          echo "tarball=$(echo temporal_sdk_ruby_bridge-*.tar.gz)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.package.outputs.tarball }}
          asset_name: ${{ steps.package.outputs.tarball }}
          asset_content_type: application/x-gzip
