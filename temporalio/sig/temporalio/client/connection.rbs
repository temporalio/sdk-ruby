module Temporalio
  class Client
    class Connection
      class Options
        attr_reader target_host: String
        attr_reader api_key: String?
        attr_reader tls: bool | Connection::TLSOptions
        attr_reader rpc_metadata: Hash[String, String]
        attr_reader rpc_retry: RPCRetryOptions
        attr_reader identity: String
        attr_reader keep_alive: KeepAliveOptions
        attr_reader http_connect_proxy: HTTPConnectProxyOptions
        attr_reader runtime: Runtime
        attr_reader lazy_connect: bool

        def initialize: (
          target_host: String,
          api_key: String?,
          tls: bool | Connection::TLSOptions,
          rpc_metadata: Hash[String, String],
          rpc_retry: RPCRetryOptions,
          identity: String,
          keep_alive: KeepAliveOptions,
          http_connect_proxy: HTTPConnectProxyOptions?,
          runtime: Runtime,
          lazy_connect: bool
        ) -> void

        def to_h: -> Hash[Symbol, untyped]

        def with: (**untyped) -> Options
      end

      class TLSOptions
        attr_reader client_cert: String?
        attr_reader client_private_key: String?
        attr_reader server_root_ca_cert: String?
        attr_reader domain: String?

        def initialize: (
          ?client_cert: String?,
          ?client_private_key: String?,
          ?server_root_ca_cert: String?,
          ?domain: String?
        ) -> void
      end

      class RPCRetryOptions
        attr_reader initial_interval: Float
        attr_reader randomization_factor: Float
        attr_reader multiplier: Float
        attr_reader max_interval: Float
        attr_reader max_elapsed_time: Float
        attr_reader max_retries: Integer

        def initialize: (
          ?initial_interval: Float,
          ?randomization_factor: Float,
          ?multiplier: Float,
          ?max_interval: Float,
          ?max_elapsed_time: Float,
          ?max_retries: Integer
        ) -> void
      end

      class KeepAliveOptions
        attr_reader interval: Float
        attr_reader timeout: Float

        def initialize: (
          ?interval: Float,
          ?timeout: Float
        ) -> void
      end

      class HTTPConnectProxyOptions
        attr_reader target_host: String
        attr_reader basic_auth_user: String?
        attr_reader basic_auth_pass: String?

        def initialize: (
          target_host: String,
          ?basic_auth_user: String?,
          ?basic_auth_pass: String?
        ) -> void
      end

      attr_reader options: Options

      # TODO(cretz): Update when generated
      # attr_reader workflow_service: WorkflowService
      # attr_reader operator_service: OperatorService
      # attr_reader cloud_service: CloudService
      attr_reader workflow_service: untyped
      attr_reader operator_service: untyped
      attr_reader cloud_service: untyped

      def initialize: (
        target_host: String,
        ?api_key: String?,
        ?tls: bool | Connection::TLSOptions,
        ?rpc_metadata: Hash[String, String],
        ?rpc_retry: RPCRetryOptions,
        ?identity: String,
        ?keep_alive: KeepAliveOptions,
        ?http_connect_proxy: HTTPConnectProxyOptions?,
        ?runtime: Runtime,
        ?lazy_connect: bool
      ) -> void

      def target_host: -> String
      def identity: -> String
      def connected?: -> bool
      def _core_client: -> Internal::Bridge::Client
      private def new_core_client: -> Internal::Bridge::Client
    end
  end
end