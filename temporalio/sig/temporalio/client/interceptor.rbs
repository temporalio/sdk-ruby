module Temporalio
  class Client
    module Interceptor
      def intercept_client: (Outbound next_interceptor) -> Outbound

      class StartWorkflowInput
        attr_accessor workflow: String
        attr_accessor args: Array[Object?]
        attr_accessor workflow_id: String
        attr_accessor task_queue: String
        attr_accessor execution_timeout: Float?
        attr_accessor run_timeout: Float?
        attr_accessor task_timeout: Float?
        attr_accessor id_reuse_policy: WorkflowIDReusePolicy::enum
        attr_accessor id_conflict_policy: WorkflowIDConflictPolicy::enum
        attr_accessor retry_policy: RetryPolicy?
        attr_accessor cron_schedule: String?
        attr_accessor memo: Hash[String, Object?]?
        attr_accessor search_attributes: SearchAttributes?
        attr_accessor start_delay: Float?
        attr_accessor request_eager_start: bool
        attr_accessor headers: Hash[String, String]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow: String,
          args: Array[Object?],
          workflow_id: String,
          task_queue: String,
          execution_timeout: Float?,
          run_timeout: Float?,
          task_timeout: Float?,
          id_reuse_policy: WorkflowIDReusePolicy::enum,
          id_conflict_policy: WorkflowIDConflictPolicy::enum,
          retry_policy: RetryPolicy?,
          cron_schedule: String?,
          memo: Hash[String, Object?]?,
          search_attributes: SearchAttributes?,
          start_delay: Float?,
          request_eager_start: bool,
          headers: Hash[String, String],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class ListWorkflowsInput
        attr_accessor query: String?
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          query: String?,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class CountWorkflowsInput
        attr_accessor query: String?
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          query: String?,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class DescribeWorkflowInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class FetchWorkflowHistoryEventsInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor wait_new_event: bool
        attr_accessor event_filter_type: Integer
        attr_accessor skip_archival: bool
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          wait_new_event: bool,
          event_filter_type: Integer,
          skip_archival: bool,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class SignalWorkflowInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor signal: String
        attr_accessor args: Array[Object?]
        attr_accessor headers: Hash[String, String]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          signal: String,
          args: Array[Object?],
          headers: Hash[String, String],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class QueryWorkflowInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor query: String
        attr_accessor args: Array[Object?]
        attr_accessor reject_condition: WorkflowQueryRejectCondition::enum?
        attr_accessor headers: Hash[String, String]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          query: String,
          args: Array[Object?],
          reject_condition: WorkflowQueryRejectCondition::enum?,
          headers: Hash[String, String],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class StartWorkflowUpdateInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor update_id: String
        attr_accessor update: String
        attr_accessor args: Array[Object?]
        attr_accessor wait_for_stage: WorkflowUpdateWaitStage::enum
        attr_accessor headers: Hash[String, String]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          update_id: String,
          update: String,
          args: Array[Object?],
          wait_for_stage: WorkflowUpdateWaitStage::enum,
          headers: Hash[String, String],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class PollWorkflowUpdateInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor update_id: String
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          update_id: String,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class CancelWorkflowInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor first_execution_run_id: String?
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          first_execution_run_id: String?,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class TerminateWorkflowInput
        attr_accessor workflow_id: String
        attr_accessor run_id: String?
        attr_accessor first_execution_run_id: String?
        attr_accessor reason: String?
        attr_accessor details: Array[Object?]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          workflow_id: String,
          run_id: String?,
          first_execution_run_id: String?,
          reason: String?,
          details: Array[Object?],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class HeartbeatAsyncActivityInput
        attr_accessor task_token_or_id_reference: String | ActivityIDReference
        attr_accessor details: Array[Object?]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          task_token_or_id_reference: String | ActivityIDReference,
          details: Array[Object?],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class CompleteAsyncActivityInput
        attr_accessor task_token_or_id_reference: String | ActivityIDReference
        attr_accessor result: Object?
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          task_token_or_id_reference: String | ActivityIDReference,
          result: Object?,
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class FailAsyncActivityInput
        attr_accessor task_token_or_id_reference: String | ActivityIDReference
        attr_accessor error: Exception
        attr_accessor last_heartbeat_details: Array[Object?]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          task_token_or_id_reference: String | ActivityIDReference,
          error: Exception,
          last_heartbeat_details: Array[Object?],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class ReportCancellationAsyncActivityInput
        attr_accessor task_token_or_id_reference: String | ActivityIDReference
        attr_accessor details: Array[Object?]
        attr_accessor rpc_metadata: Hash[String, String]?
        attr_accessor rpc_timeout: Float?

        def initialize: (
          task_token_or_id_reference: String | ActivityIDReference,
          details: Array[Object?],
          rpc_metadata: Hash[String, String]?,
          rpc_timeout: Float?
        ) -> void
      end

      class Outbound
        attr_reader next_interceptor: Outbound

        def initialize: (Outbound next_interceptor) -> void

        def start_workflow: (StartWorkflowInput input) -> WorkflowHandle

        def list_workflows: (ListWorkflowsInput input) -> Enumerator[WorkflowExecution, WorkflowExecution]

        def count_workflows: (CountWorkflowsInput input) -> WorkflowExecutionCount

        def describe_workflow: (DescribeWorkflowInput input) -> WorkflowExecution::Description

        def fetch_workflow_history_events: (FetchWorkflowHistoryEventsInput input) -> Enumerator[untyped, untyped]

        def signal_workflow: (SignalWorkflowInput input) -> void

        def query_workflow: (QueryWorkflowInput input) -> Object?

        def start_workflow_update: (StartWorkflowUpdateInput input) -> WorkflowUpdateHandle

        def poll_workflow_update: (PollWorkflowUpdateInput input) -> untyped

        def cancel_workflow: (CancelWorkflowInput input) -> void

        def terminate_workflow: (TerminateWorkflowInput input) -> void

        def heartbeat_async_activity: (HeartbeatAsyncActivityInput input) -> void

        def complete_async_activity: (CompleteAsyncActivityInput input) -> void

        def fail_async_activity: (FailAsyncActivityInput input) -> void

        def report_cancellation_async_activity: (ReportCancellationAsyncActivityInput input) -> void
      end
    end
  end
end