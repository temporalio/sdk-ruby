module Temporalio
  class Client
    class Schedule
      attr_reader action: Action
      attr_reader spec: Spec
      attr_reader policy: Policy
      attr_reader state: State

      def self._from_proto: (
        untyped raw_schedule,
        Converters::DataConverter data_converter
      ) -> Schedule

      def initialize: (
        action: Action,
        spec: Spec,
        ?policy: Policy,
        ?state: State
      ) -> void

      def _to_proto: (Converters::DataConverter data_converter) -> untyped

      def with: (**untyped) -> Schedule

      class Description
        attr_reader id: String
        attr_reader schedule: Schedule
        attr_reader info: Schedule::Info
        attr_reader raw_description: untyped

        def initialize: (
          id: String,
          raw_description: untyped,
          data_converter: Converters::DataConverter
        ) -> void

        def memo: -> Hash[String, Object?]?
        def search_attributes: -> SearchAttributes?
      end

      class Info
        attr_reader num_actions: Integer
        attr_reader num_actions_missed_catchup_window: Integer
        attr_reader num_actions_skipped_overlap: Integer
        attr_reader running_actions: Array[ActionExecution]
        attr_reader recent_actions: Array[ActionResult]
        attr_reader next_action_times: Array[Time]
        attr_reader created_at: Time
        attr_reader last_updated_at: Time?

        def initialize: (raw_info: untyped) -> void
      end

      module Action
        def self._from_proto: (
          untyped raw_action,
          Converters::DataConverter data_converter
        ) -> Action

        def _to_proto: (Converters::DataConverter data_converter) -> untyped

        class StartWorkflow
          include Action

          attr_reader workflow: singleton(Workflow::Definition) | Workflow::Definition::Info | Symbol | String
          attr_reader args: Array[Object?]
          attr_reader id: String
          attr_reader task_queue: String
          attr_reader execution_timeout: duration?
          attr_reader run_timeout: duration?
          attr_reader task_timeout: duration?
          attr_reader retry_policy: RetryPolicy?
          attr_reader memo: Hash[String, Object?]?
          attr_reader search_attributes: SearchAttributes?
          attr_reader headers: Hash[String, Object?]?

          def self.new: (
            singleton(Workflow::Definition) | Workflow::Definition::Info | Symbol | String workflow,
            *Object? args,
            id: String,
            task_queue: String,
            ?execution_timeout: duration?,
            ?run_timeout: duration?,
            ?task_timeout: duration?,
            ?retry_policy: RetryPolicy?,
            ?memo: Hash[String, Object?]?,
            ?search_attributes: SearchAttributes?,
            ?headers: Hash[String, Object?]?
          ) -> StartWorkflow

          def self._from_proto: (
            untyped raw_info,
            Converters::DataConverter data_converter
          ) -> StartWorkflow

          def with: (**untyped) -> StartWorkflow

          def _to_proto: (Converters::DataConverter data_converter) -> untyped
        end
      end

      module OverlapPolicy
        type enum = Integer
    
        SKIP: enum
        BUFFER_ONE: enum
        BUFFER_ALL: enum
        CANCEL_OTHER: enum
        TERMINATE_OTHER: enum
        ALLOW_ALL: enum
      end

      class Backfill
        attr_reader start_at: Time
        attr_reader end_at: Time
        attr_reader overlap: OverlapPolicy::enum?

        def initialize: (
          start_at: Time,
          end_at: Time,
          ?overlap: OverlapPolicy::enum?
        ) -> void

        def _to_proto: -> untyped
      end

      module ActionExecution
        class StartWorkflow
          include ActionExecution

          attr_reader workflow_id: String
          attr_reader first_execution_run_id: String

          def initialize: (raw_execution: untyped) -> void
        end
      end

      class ActionResult
        attr_reader schedule_at: Time
        attr_reader started_at: Time
        attr_reader action: ActionExecution

        def initialize: (raw_result: untyped) -> void
      end

      class Spec
        attr_reader calendars: Array[Calendar]
        attr_reader intervals: Array[Interval]
        attr_reader cron_expressions: Array[String]
        attr_reader skip: Array[Calendar]
        attr_reader start_at: Time?
        attr_reader end_at: Time?
        attr_reader jitter: Float?
        attr_reader time_zone_name: String?

        def self._from_proto: (untyped raw_spec) -> Spec

        def initialize: (
          ?calendars: Array[Calendar],
          ?intervals: Array[Interval],
          ?cron_expressions: Array[String],
          ?skip: Array[Calendar],
          ?start_at: Time?,
          ?end_at: Time?,
          ?jitter: Float?,
          ?time_zone_name: String?
        ) -> void

        def _to_proto: -> untyped

        def with: (**untyped) -> Spec

        class Calendar
          attr_reader second: Array[Schedule::Range]
          attr_reader minute: Array[Schedule::Range]
          attr_reader hour: Array[Schedule::Range]
          attr_reader day_of_month: Array[Schedule::Range]
          attr_reader month: Array[Schedule::Range]
          attr_reader year: Array[Schedule::Range]
          attr_reader day_of_week: Array[Schedule::Range]
          attr_reader comment: String?

          def self._from_proto: (untyped raw_cal) -> Calendar

          def initialize: (
            ?second: Array[Schedule::Range],
            ?minute: Array[Schedule::Range],
            ?hour: Array[Schedule::Range],
            ?day_of_month: Array[Schedule::Range],
            ?month: Array[Schedule::Range],
            ?year: Array[Schedule::Range],
            ?day_of_week: Array[Schedule::Range],
            ?comment: String?
          ) -> void

          def _to_proto: -> untyped
        end

        class Interval
          attr_reader every: duration
          attr_reader offset: duration?

          def self._from_proto: (untyped raw_int) -> Interval

          def initialize: (
            every: duration,
            ?offset: duration?
          ) -> void

          def _to_proto: -> untyped
        end
      end

      class Range
        attr_reader start: Integer
        attr_reader finish: Integer
        attr_reader step: Integer

        def self.new: (
          Integer start,
          ?Integer finish,
          ?Integer step
        ) -> Range

        def self._from_proto: (untyped raw_range) -> Range
        def self._from_protos: (Array[untyped] raw_ranges) -> Array[Range]
        def self._to_protos: (Array[Range] ranges) -> Array[untyped]

        def _to_proto: -> untyped
      end

      class Policy
        attr_reader overlap: OverlapPolicy::enum
        attr_reader catchup_window: duration
        attr_reader pause_on_failure: bool

        def self._from_proto: (untyped raw_policies) -> Policy

        def initialize: (
          ?overlap: OverlapPolicy::enum,
          ?catchup_window: duration,
          ?pause_on_failure: bool
        ) -> void

        def _to_proto: -> untyped
      end

      class State
        attr_reader note: String?
        attr_reader paused: bool
        attr_reader limited_actions: bool
        attr_reader remaining_actions: Integer

        def self._from_proto: (untyped raw_state) -> State

        def initialize: (
          ?note: String?,
          ?paused: bool,
          ?limited_actions: bool,
          ?remaining_actions: Integer
        ) -> void

        def _to_proto: -> untyped
      end

      class Update
        attr_reader schedule: Schedule
        attr_reader search_attributes: SearchAttributes?

        def initialize: (
          schedule: Schedule,
          ?search_attributes: SearchAttributes?
        ) -> void

        class Input
          attr_reader description: Description

          def initialize: (description: Description) -> void
        end
      end

      module List
        class Description
          attr_reader id: String
          attr_reader schedule: Schedule
          attr_reader info: Info
          attr_reader raw_entry: untyped

          def initialize: (
            raw_entry: untyped,
            data_converter: Converters::DataConverter
          ) -> void
        end

        class Schedule
          attr_reader action: Action
          attr_reader spec: Spec
          attr_reader state: State

          def initialize: (raw_info: untyped) -> void
        end

        module Action
          class StartWorkflow
            include Action

            attr_reader workflow: String

            def initialize: (workflow: String) -> void
          end
        end

        class Info
          attr_reader recent_actions: Array[ActionResult]
          attr_reader next_action_times: Array[Time]

          def initialize: (raw_info: untyped) -> void
        end

        class State
          attr_reader note: String?
          attr_reader paused: bool

          def initialize: (raw_info: untyped) -> void
        end
      end
    end
  end
end