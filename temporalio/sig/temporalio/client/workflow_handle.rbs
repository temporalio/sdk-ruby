module Temporalio
  class Client
    class WorkflowHandle
      attr_reader id: String
      attr_reader run_id: String?
      attr_reader result_run_id: String?
      attr_reader first_execution_run_id: String?

      def initialize: (
        client: Client,
        id: String,
        run_id: String?,
        result_run_id: String?,
        first_execution_run_id: String?
      ) -> void

      def result: (
        ?follow_runs: bool,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> Object

      def describe: (
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> WorkflowExecution::Description

      def fetch_history: (
        ?event_filter_type: Integer,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> WorkflowHistory

      def fetch_history_events: (
        ?wait_new_event: bool,
        ?event_filter_type: Integer,
        ?skip_archival: bool,
        ?specific_run_id: String?,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> Enumerator[untyped, untyped]

      def signal: (
        String signal,
        *Object? args,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> void

      def query: (
        String query,
        *Object? args,
        ?reject_condition: WorkflowQueryRejectCondition::enum?,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> Object?

      def start_update: (
        String update,
        *Object? args,
        wait_for_stage: WorkflowUpdateWaitStage::enum,
        ?id: String,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> WorkflowUpdateHandle

      def execute_update: (
        String update,
        *Object? args,
        ?id: String,
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> Object?

      def update_handle: (
        String id,
        ?specific_run_id: String?
      ) -> WorkflowUpdateHandle

      def cancel: (
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> void

      def terminate: (
        ?String? reason,
        ?details: Array[Object?],
        ?rpc_metadata: Hash[String, String]?,
        ?rpc_timeout: Float?
      ) -> void
    end
  end
end