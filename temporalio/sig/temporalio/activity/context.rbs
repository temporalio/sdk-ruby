module Temporalio
  module Activity
    class Context
      def self.current: -> Context
      def self.current_or_nil: -> Context?
      def self.exist?: -> bool

      def self._current_executor: -> Worker::ActivityExecutor?
      def self._current_executor=: (Worker::ActivityExecutor? executor) -> void

      def info: -> Info
      def instance: -> Definition?
      def heartbeat: (*Object? details) -> void
      def cancellation: -> Cancellation
      def worker_shutdown_cancellation: -> Cancellation
      def payload_converter: -> Converters::PayloadConverter
      def logger: -> ScopedLogger

      def _scoped_logger_info: -> Hash[Symbol, Object]

      def metric_meter: -> Metric::Meter
    end
  end
end