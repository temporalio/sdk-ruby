module Temporalio
  module Bridge
    module Api
      module WorkflowCompletion
        # / Result of a single workflow activation, reported from lang to core
        #
        class WorkflowActivationCompletion < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (WorkflowActivationCompletion) -> String

          # The run id from the workflow activation you are completing
          #
          attr_accessor run_id(): ::String

          def run_id!: () -> ::String?

          attr_accessor successful(): ::Temporalio::Bridge::Api::WorkflowCompletion::Success?

          def successful=: [M < ::Temporalio::Bridge::Api::WorkflowCompletion::Success::_ToProto] (M?) -> M?
                         | ...

          def successful!: () -> ::Temporalio::Bridge::Api::WorkflowCompletion::Success?

          attr_accessor failed(): ::Temporalio::Bridge::Api::WorkflowCompletion::Failure?

          def failed=: [M < ::Temporalio::Bridge::Api::WorkflowCompletion::Failure::_ToProto] (M?) -> M?
                     | ...

          def failed!: () -> ::Temporalio::Bridge::Api::WorkflowCompletion::Failure?

          def initialize: (?run_id: ::String, ?successful: ::Temporalio::Bridge::Api::WorkflowCompletion::Success::init?, ?failed: ::Temporalio::Bridge::Api::WorkflowCompletion::Failure::init?) -> void

          def []: (:run_id) -> ::String
                | (:successful) -> ::Temporalio::Bridge::Api::WorkflowCompletion::Success?
                | (:failed) -> ::Temporalio::Bridge::Api::WorkflowCompletion::Failure?
                | (::Symbol) -> untyped

          def []=: (:run_id, ::String) -> ::String
                 | (:successful, ::Temporalio::Bridge::Api::WorkflowCompletion::Success?) -> ::Temporalio::Bridge::Api::WorkflowCompletion::Success?
                 | [M < ::Temporalio::Bridge::Api::WorkflowCompletion::Success::_ToProto] (:successful, M?) -> M?
                 | (:failed, ::Temporalio::Bridge::Api::WorkflowCompletion::Failure?) -> ::Temporalio::Bridge::Api::WorkflowCompletion::Failure?
                 | [M < ::Temporalio::Bridge::Api::WorkflowCompletion::Failure::_ToProto] (:failed, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WorkflowActivationCompletion
          end

          # The type of `#initialize` parameter.
          type init = WorkflowActivationCompletion | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowActivationCompletion, WorkflowActivationCompletion | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowActivationCompletion, WorkflowActivationCompletion | _ToProto]

          type array = ::Array[WorkflowActivationCompletion | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowActivationCompletion | _ToProto]
        end

        # / Successful workflow activation with a list of commands generated by the workflow execution
        #
        class Success < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Success) -> String

          # A list of commands to send back to the temporal server
          #
          attr_accessor commands(): ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::field_array

          # A list of commands to send back to the temporal server
          #
          def commands=: (::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::array) -> ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::array
                       | ...

          def commands!: () -> ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::field_array?

          # Any internal flags which the lang SDK used in the processing of this activation
          #
          attr_accessor used_internal_flags(): ::Protobuf::field_array[::Integer]

          # Any internal flags which the lang SDK used in the processing of this activation
          #
          def used_internal_flags=: (::Array[::Integer]) -> ::Array[::Integer]
                                  | ...

          def used_internal_flags!: () -> ::Protobuf::field_array[::Integer]?

          def initialize: (?commands: ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::array, ?used_internal_flags: ::Array[::Integer]) -> void

          def []: (:commands) -> ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::field_array
                | (:used_internal_flags) -> ::Protobuf::field_array[::Integer]
                | (::Symbol) -> untyped

          def []=: (:commands, ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::field_array) -> ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::field_array
                 | (:commands, ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::array) -> ::Temporalio::Bridge::Api::WorkflowCommands::WorkflowCommand::array
                 | (:used_internal_flags, ::Protobuf::field_array[::Integer]) -> ::Protobuf::field_array[::Integer]
                 | (:used_internal_flags, ::Array[::Integer]) -> ::Array[::Integer]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Success
          end

          # The type of `#initialize` parameter.
          type init = Success | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Success, Success | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Success, Success | _ToProto]

          type array = ::Array[Success | _ToProto]

          type hash[KEY] = ::Hash[KEY, Success | _ToProto]
        end

        # / Failure to activate or execute a workflow
        #
        class Failure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Failure) -> String

          attr_accessor failure(): ::Temporalio::Api::Failure::V1::Failure?

          def failure=: [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                      | ...

          def failure!: () -> ::Temporalio::Api::Failure::V1::Failure?

          # Forces overriding the WFT failure cause
          #
          attr_accessor force_cause(): ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause

          # Forces overriding the WFT failure cause
          #
          def force_cause=: (::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::values) -> ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::values
                          | ...

          def force_cause!: () -> ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause?

          def initialize: (?failure: ::Temporalio::Api::Failure::V1::Failure::init?, ?force_cause: ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::init) -> void

          def []: (:failure) -> ::Temporalio::Api::Failure::V1::Failure?
                | (:force_cause) -> ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause
                | (::Symbol) -> untyped

          def []=: (:failure, ::Temporalio::Api::Failure::V1::Failure?) -> ::Temporalio::Api::Failure::V1::Failure?
                 | [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (:failure, M?) -> M?
                 | (:force_cause, ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause) -> ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause
                 | (:force_cause, ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::values) -> ::Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::values
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Failure
          end

          # The type of `#initialize` parameter.
          type init = Failure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Failure, Failure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Failure, Failure | _ToProto]

          type array = ::Array[Failure | _ToProto]

          type hash[KEY] = ::Hash[KEY, Failure | _ToProto]
        end
      end
    end
  end
end
