module Coresdk
  module Child_workflow
    # *
    #  Used by the service to determine the fate of a child workflow
    #  in case its parent is closed.
    #
    class ParentClosePolicy < ::Protobuf::Enum
      type names = :PARENT_CLOSE_POLICY_UNSPECIFIED | :PARENT_CLOSE_POLICY_TERMINATE | :PARENT_CLOSE_POLICY_ABANDON | :PARENT_CLOSE_POLICY_REQUEST_CANCEL

      type strings = "PARENT_CLOSE_POLICY_UNSPECIFIED" | "PARENT_CLOSE_POLICY_TERMINATE" | "PARENT_CLOSE_POLICY_ABANDON" | "PARENT_CLOSE_POLICY_REQUEST_CANCEL"

      type tags = 0 | 1 | 2 | 3

      type values = names | strings | tags

      attr_reader name(): names

      attr_reader tag(): tags

      # * Let's the server set the default.
      #
      PARENT_CLOSE_POLICY_UNSPECIFIED: ParentClosePolicy

      # * Terminate means terminating the child workflow.
      #
      PARENT_CLOSE_POLICY_TERMINATE: ParentClosePolicy

      # * Abandon means not doing anything on the child workflow.
      #
      PARENT_CLOSE_POLICY_ABANDON: ParentClosePolicy

      # * Cancel means requesting cancellation on the child workflow.
      #
      PARENT_CLOSE_POLICY_REQUEST_CANCEL: ParentClosePolicy

      # The type of `#initialize` parameter.
      type init = ParentClosePolicy | values

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[ParentClosePolicy, ParentClosePolicy | values]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ParentClosePolicy, ParentClosePolicy | values]

      type array = ::Array[ParentClosePolicy | values]

      type hash[KEY] = ::Hash[KEY, ParentClosePolicy | values]
    end

    # * Possible causes of failure to start a child workflow
    #
    class StartChildWorkflowExecutionFailedCause < ::Protobuf::Enum
      type names = :START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED | :START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS

      type strings = "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED" | "START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS"

      type tags = 0 | 1

      type values = names | strings | tags

      attr_reader name(): names

      attr_reader tag(): tags

      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: StartChildWorkflowExecutionFailedCause

      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS: StartChildWorkflowExecutionFailedCause

      # The type of `#initialize` parameter.
      type init = StartChildWorkflowExecutionFailedCause | values

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[StartChildWorkflowExecutionFailedCause, StartChildWorkflowExecutionFailedCause | values]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, StartChildWorkflowExecutionFailedCause, StartChildWorkflowExecutionFailedCause | values]

      type array = ::Array[StartChildWorkflowExecutionFailedCause | values]

      type hash[KEY] = ::Hash[KEY, StartChildWorkflowExecutionFailedCause | values]
    end

    # *
    #  Controls at which point to report back to lang when a child workflow is cancelled
    #
    class ChildWorkflowCancellationType < ::Protobuf::Enum
      type names = :ABANDON | :TRY_CANCEL | :WAIT_CANCELLATION_COMPLETED | :WAIT_CANCELLATION_REQUESTED

      type strings = "ABANDON" | "TRY_CANCEL" | "WAIT_CANCELLATION_COMPLETED" | "WAIT_CANCELLATION_REQUESTED"

      type tags = 0 | 1 | 2 | 3

      type values = names | strings | tags

      attr_reader name(): names

      attr_reader tag(): tags

      # * Do not request cancellation of the child workflow if already scheduled
      #
      ABANDON: ChildWorkflowCancellationType

      # * Initiate a cancellation request and immediately report cancellation to the parent.
      #
      TRY_CANCEL: ChildWorkflowCancellationType

      # * Wait for child cancellation completion.
      #
      WAIT_CANCELLATION_COMPLETED: ChildWorkflowCancellationType

      # * Request cancellation of the child and wait for confirmation that the request was received.
      #
      WAIT_CANCELLATION_REQUESTED: ChildWorkflowCancellationType

      # The type of `#initialize` parameter.
      type init = ChildWorkflowCancellationType | values

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[ChildWorkflowCancellationType, ChildWorkflowCancellationType | values]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ChildWorkflowCancellationType, ChildWorkflowCancellationType | values]

      type array = ::Array[ChildWorkflowCancellationType | values]

      type hash[KEY] = ::Hash[KEY, ChildWorkflowCancellationType | values]
    end

    # *
    #  Used by core to resolve child workflow executions.
    #
    class ChildWorkflowResult < ::Protobuf::Message
      attr_accessor completed(): ::Coresdk::Child_workflow::Success?

      def completed=: [M < ::Coresdk::Child_workflow::Success::_ToProto] (M?) -> M?
                    | ...

      def completed!: () -> ::Coresdk::Child_workflow::Success?

      attr_accessor failed(): ::Coresdk::Child_workflow::Failure?

      def failed=: [M < ::Coresdk::Child_workflow::Failure::_ToProto] (M?) -> M?
                 | ...

      def failed!: () -> ::Coresdk::Child_workflow::Failure?

      attr_accessor cancelled(): ::Coresdk::Child_workflow::Cancellation?

      def cancelled=: [M < ::Coresdk::Child_workflow::Cancellation::_ToProto] (M?) -> M?
                    | ...

      def cancelled!: () -> ::Coresdk::Child_workflow::Cancellation?

      def initialize: (?completed: ::Coresdk::Child_workflow::Success::init?, ?failed: ::Coresdk::Child_workflow::Failure::init?, ?cancelled: ::Coresdk::Child_workflow::Cancellation::init?) -> void

      def []: (:completed) -> ::Coresdk::Child_workflow::Success?
            | (:failed) -> ::Coresdk::Child_workflow::Failure?
            | (:cancelled) -> ::Coresdk::Child_workflow::Cancellation?
            | (::Symbol) -> untyped

      def []=: (:completed, ::Coresdk::Child_workflow::Success?) -> ::Coresdk::Child_workflow::Success?
             | [M < ::Coresdk::Child_workflow::Success::_ToProto] (:completed, M?) -> M?
             | (:failed, ::Coresdk::Child_workflow::Failure?) -> ::Coresdk::Child_workflow::Failure?
             | [M < ::Coresdk::Child_workflow::Failure::_ToProto] (:failed, M?) -> M?
             | (:cancelled, ::Coresdk::Child_workflow::Cancellation?) -> ::Coresdk::Child_workflow::Cancellation?
             | [M < ::Coresdk::Child_workflow::Cancellation::_ToProto] (:cancelled, M?) -> M?
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> ChildWorkflowResult
      end

      # The type of `#initialize` parameter.
      type init = ChildWorkflowResult | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[ChildWorkflowResult, ChildWorkflowResult | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ChildWorkflowResult, ChildWorkflowResult | _ToProto]

      type array = ::Array[ChildWorkflowResult | _ToProto]

      type hash[KEY] = ::Hash[KEY, ChildWorkflowResult | _ToProto]
    end

    # *
    #  Used in ChildWorkflowResult to report successful completion.
    #
    class Success < ::Protobuf::Message
      attr_accessor result(): ::Coresdk::Common::Payload?

      def result=: [M < ::Coresdk::Common::Payload::_ToProto] (M?) -> M?
                 | ...

      def result!: () -> ::Coresdk::Common::Payload?

      def initialize: (?result: ::Coresdk::Common::Payload::init?) -> void

      def []: (:result) -> ::Coresdk::Common::Payload?
            | (::Symbol) -> untyped

      def []=: (:result, ::Coresdk::Common::Payload?) -> ::Coresdk::Common::Payload?
             | [M < ::Coresdk::Common::Payload::_ToProto] (:result, M?) -> M?
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> Success
      end

      # The type of `#initialize` parameter.
      type init = Success | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[Success, Success | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Success, Success | _ToProto]

      type array = ::Array[Success | _ToProto]

      type hash[KEY] = ::Hash[KEY, Success | _ToProto]
    end

    # *
    #  Used in ChildWorkflowResult to report non successful outcomes such as
    #  application failures, timeouts, terminations, and cancellations.
    #
    class Failure < ::Protobuf::Message
      attr_accessor failure(): ::Temporal::Api::Failure::V1::Failure?

      def failure=: [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                  | ...

      def failure!: () -> ::Temporal::Api::Failure::V1::Failure?

      def initialize: (?failure: ::Temporal::Api::Failure::V1::Failure::init?) -> void

      def []: (:failure) -> ::Temporal::Api::Failure::V1::Failure?
            | (::Symbol) -> untyped

      def []=: (:failure, ::Temporal::Api::Failure::V1::Failure?) -> ::Temporal::Api::Failure::V1::Failure?
             | [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (:failure, M?) -> M?
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> Failure
      end

      # The type of `#initialize` parameter.
      type init = Failure | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[Failure, Failure | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Failure, Failure | _ToProto]

      type array = ::Array[Failure | _ToProto]

      type hash[KEY] = ::Hash[KEY, Failure | _ToProto]
    end

    # *
    #  Used in ChildWorkflowResult to report cancellation.
    #  Failure should be ChildWorkflowFailure with a CanceledFailure cause.
    #
    class Cancellation < ::Protobuf::Message
      attr_accessor failure(): ::Temporal::Api::Failure::V1::Failure?

      def failure=: [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                  | ...

      def failure!: () -> ::Temporal::Api::Failure::V1::Failure?

      def initialize: (?failure: ::Temporal::Api::Failure::V1::Failure::init?) -> void

      def []: (:failure) -> ::Temporal::Api::Failure::V1::Failure?
            | (::Symbol) -> untyped

      def []=: (:failure, ::Temporal::Api::Failure::V1::Failure?) -> ::Temporal::Api::Failure::V1::Failure?
             | [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (:failure, M?) -> M?
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> Cancellation
      end

      # The type of `#initialize` parameter.
      type init = Cancellation | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[Cancellation, Cancellation | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Cancellation, Cancellation | _ToProto]

      type array = ::Array[Cancellation | _ToProto]

      type hash[KEY] = ::Hash[KEY, Cancellation | _ToProto]
    end
  end
end
