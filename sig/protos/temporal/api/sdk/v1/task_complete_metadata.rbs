module Temporalio
  module Api
    module Sdk
      module V1
        class WorkflowTaskCompletedMetadata < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (WorkflowTaskCompletedMetadata) -> String

          # Internal flags used by the core SDK. SDKs using flags must comply with the following behavior:
          #
          #  During replay:
          #  * If a flag is not recognized (value is too high or not defined), it must fail the workflow
          #    task.
          #  * If a flag is recognized, it is stored in a set of used flags for the run. Code checks for
          #    that flag during and after this WFT are allowed to assume that the flag is present.
          #  * If a code check for a flag does not find the flag in the set of used flags, it must take
          #    the branch corresponding to the absence of that flag.
          #
          #  During non-replay execution of new WFTs:
          #  * The SDK is free to use all flags it knows about. It must record any newly-used (IE: not
          #    previously recorded) flags when completing the WFT.
          #
          #  SDKs which are too old to even know about this field at all are considered to produce
          #  undefined behavior if they replay workflows which used this mechanism.
          #
          #  (-- api-linter: core::0141::forbidden-types=disabled
          #      aip.dev/not-precedent: These really shouldn't have negative values. --)
          #
          attr_accessor core_used_flags(): ::Protobuf::field_array[::Integer]

          # Internal flags used by the core SDK. SDKs using flags must comply with the following behavior:
          #
          #  During replay:
          #  * If a flag is not recognized (value is too high or not defined), it must fail the workflow
          #    task.
          #  * If a flag is recognized, it is stored in a set of used flags for the run. Code checks for
          #    that flag during and after this WFT are allowed to assume that the flag is present.
          #  * If a code check for a flag does not find the flag in the set of used flags, it must take
          #    the branch corresponding to the absence of that flag.
          #
          #  During non-replay execution of new WFTs:
          #  * The SDK is free to use all flags it knows about. It must record any newly-used (IE: not
          #    previously recorded) flags when completing the WFT.
          #
          #  SDKs which are too old to even know about this field at all are considered to produce
          #  undefined behavior if they replay workflows which used this mechanism.
          #
          #  (-- api-linter: core::0141::forbidden-types=disabled
          #      aip.dev/not-precedent: These really shouldn't have negative values. --)
          #
          def core_used_flags=: (::Array[::Integer]) -> ::Array[::Integer]
                              | ...

          def core_used_flags!: () -> ::Protobuf::field_array[::Integer]?

          # Flags used by the SDK lang. No attempt is made to distinguish between different SDK languages
          #  here as processing a workflow with a different language than the one which authored it is
          #  already undefined behavior. See `core_used_patches` for more.
          #
          #  (-- api-linter: core::0141::forbidden-types=disabled
          #      aip.dev/not-precedent: These really shouldn't have negative values. --)
          #
          attr_accessor lang_used_flags(): ::Protobuf::field_array[::Integer]

          # Flags used by the SDK lang. No attempt is made to distinguish between different SDK languages
          #  here as processing a workflow with a different language than the one which authored it is
          #  already undefined behavior. See `core_used_patches` for more.
          #
          #  (-- api-linter: core::0141::forbidden-types=disabled
          #      aip.dev/not-precedent: These really shouldn't have negative values. --)
          #
          def lang_used_flags=: (::Array[::Integer]) -> ::Array[::Integer]
                              | ...

          def lang_used_flags!: () -> ::Protobuf::field_array[::Integer]?

          def initialize: (?core_used_flags: ::Array[::Integer], ?lang_used_flags: ::Array[::Integer]) -> void

          def []: (:core_used_flags) -> ::Protobuf::field_array[::Integer]
                | (:lang_used_flags) -> ::Protobuf::field_array[::Integer]
                | (::Symbol) -> untyped

          def []=: (:core_used_flags, ::Protobuf::field_array[::Integer]) -> ::Protobuf::field_array[::Integer]
                 | (:core_used_flags, ::Array[::Integer]) -> ::Array[::Integer]
                 | (:lang_used_flags, ::Protobuf::field_array[::Integer]) -> ::Protobuf::field_array[::Integer]
                 | (:lang_used_flags, ::Array[::Integer]) -> ::Array[::Integer]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WorkflowTaskCompletedMetadata
          end

          # The type of `#initialize` parameter.
          type init = WorkflowTaskCompletedMetadata | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowTaskCompletedMetadata, WorkflowTaskCompletedMetadata | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowTaskCompletedMetadata, WorkflowTaskCompletedMetadata | _ToProto]

          type array = ::Array[WorkflowTaskCompletedMetadata | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowTaskCompletedMetadata | _ToProto]
        end
      end
    end
  end
end
