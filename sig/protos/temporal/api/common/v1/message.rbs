module Temporal
  module Api
    module Common
      module V1
        class DataBlob < ::Protobuf::Message
          attr_accessor encoding_type(): ::Temporal::Api::Enums::V1::EncodingType

          def encoding_type=: (::Temporal::Api::Enums::V1::EncodingType::values) -> ::Temporal::Api::Enums::V1::EncodingType::values
                            | ...

          def encoding_type!: () -> ::Temporal::Api::Enums::V1::EncodingType?

          attr_accessor data(): ::String

          def data!: () -> ::String?

          def initialize: (?encoding_type: ::Temporal::Api::Enums::V1::EncodingType::init, ?data: ::String) -> void

          def []: (:encoding_type) -> ::Temporal::Api::Enums::V1::EncodingType
                | (:data) -> ::String
                | (::Symbol) -> untyped

          def []=: (:encoding_type, ::Temporal::Api::Enums::V1::EncodingType) -> ::Temporal::Api::Enums::V1::EncodingType
                 | (:encoding_type, ::Temporal::Api::Enums::V1::EncodingType::values) -> ::Temporal::Api::Enums::V1::EncodingType::values
                 | (:data, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> DataBlob
          end

          # The type of `#initialize` parameter.
          type init = DataBlob | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[DataBlob, DataBlob | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, DataBlob, DataBlob | _ToProto]

          type array = ::Array[DataBlob | _ToProto]

          type hash[KEY] = ::Hash[KEY, DataBlob | _ToProto]
        end

        # See `Payload`
        #
        class Payloads < ::Protobuf::Message
          attr_accessor payloads(): ::Temporal::Api::Common::V1::Payload::field_array

          def payloads=: (::Temporal::Api::Common::V1::Payload::array) -> ::Temporal::Api::Common::V1::Payload::array
                       | ...

          def payloads!: () -> ::Temporal::Api::Common::V1::Payload::field_array?

          def initialize: (?payloads: ::Temporal::Api::Common::V1::Payload::array) -> void

          def []: (:payloads) -> ::Temporal::Api::Common::V1::Payload::field_array
                | (::Symbol) -> untyped

          def []=: (:payloads, ::Temporal::Api::Common::V1::Payload::field_array) -> ::Temporal::Api::Common::V1::Payload::field_array
                 | (:payloads, ::Temporal::Api::Common::V1::Payload::array) -> ::Temporal::Api::Common::V1::Payload::array
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Payloads
          end

          # The type of `#initialize` parameter.
          type init = Payloads | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Payloads, Payloads | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Payloads, Payloads | _ToProto]

          type array = ::Array[Payloads | _ToProto]

          type hash[KEY] = ::Hash[KEY, Payloads | _ToProto]
        end

        # Represents some binary (byte array) data (ex: activity input parameters or workflow result) with
        #  metadata which describes this binary data (format, encoding, encryption, etc). Serialization
        #  of the data may be user-defined.
        #
        class Payload < ::Protobuf::Message
          attr_accessor metadata(): ::Protobuf::field_hash[::String, ::String]

          def metadata=: (::Hash[::String, ::String]) -> ::Hash[::String, ::String]
                       | ...

          def metadata!: () -> ::Protobuf::field_hash[::String, ::String]?

          attr_accessor data(): ::String

          def data!: () -> ::String?

          def initialize: (?metadata: ::Hash[::String, ::String], ?data: ::String) -> void

          def []: (:metadata) -> ::Protobuf::field_hash[::String, ::String]
                | (:data) -> ::String
                | (::Symbol) -> untyped

          def []=: (:metadata, ::Protobuf::field_hash[::String, ::String]) -> ::Protobuf::field_hash[::String, ::String]
                 | (:metadata, ::Hash[::String, ::String]) -> ::Hash[::String, ::String]
                 | (:data, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Payload
          end

          # The type of `#initialize` parameter.
          type init = Payload | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Payload, Payload | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Payload, Payload | _ToProto]

          type array = ::Array[Payload | _ToProto]

          type hash[KEY] = ::Hash[KEY, Payload | _ToProto]
        end

        # A user-defined set of *indexed* fields that are used/exposed when listing/searching workflows.
        #  The payload is not serialized in a user-defined way.
        #
        class SearchAttributes < ::Protobuf::Message
          attr_accessor indexed_fields(): ::Temporal::Api::Common::V1::Payload::field_hash[::String]

          def indexed_fields=: (::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                             | ...

          def indexed_fields!: () -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]?

          def initialize: (?indexed_fields: ::Temporal::Api::Common::V1::Payload::hash[::String]) -> void

          def []: (:indexed_fields) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                | (::Symbol) -> untyped

          def []=: (:indexed_fields, ::Temporal::Api::Common::V1::Payload::field_hash[::String]) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                 | (:indexed_fields, ::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> SearchAttributes
          end

          # The type of `#initialize` parameter.
          type init = SearchAttributes | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[SearchAttributes, SearchAttributes | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, SearchAttributes, SearchAttributes | _ToProto]

          type array = ::Array[SearchAttributes | _ToProto]

          type hash[KEY] = ::Hash[KEY, SearchAttributes | _ToProto]
        end

        # A user-defined set of *unindexed* fields that are exposed when listing/searching workflows
        #
        class Memo < ::Protobuf::Message
          attr_accessor fields(): ::Temporal::Api::Common::V1::Payload::field_hash[::String]

          def fields=: (::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                     | ...

          def fields!: () -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]?

          def initialize: (?fields: ::Temporal::Api::Common::V1::Payload::hash[::String]) -> void

          def []: (:fields) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                | (::Symbol) -> untyped

          def []=: (:fields, ::Temporal::Api::Common::V1::Payload::field_hash[::String]) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                 | (:fields, ::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Memo
          end

          # The type of `#initialize` parameter.
          type init = Memo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Memo, Memo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Memo, Memo | _ToProto]

          type array = ::Array[Memo | _ToProto]

          type hash[KEY] = ::Hash[KEY, Memo | _ToProto]
        end

        # Contains metadata that can be attached to a variety of requests, like starting a workflow, and
        #  can be propagated between, for example, workflows and activities.
        #
        class Header < ::Protobuf::Message
          attr_accessor fields(): ::Temporal::Api::Common::V1::Payload::field_hash[::String]

          def fields=: (::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                     | ...

          def fields!: () -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]?

          def initialize: (?fields: ::Temporal::Api::Common::V1::Payload::hash[::String]) -> void

          def []: (:fields) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                | (::Symbol) -> untyped

          def []=: (:fields, ::Temporal::Api::Common::V1::Payload::field_hash[::String]) -> ::Temporal::Api::Common::V1::Payload::field_hash[::String]
                 | (:fields, ::Temporal::Api::Common::V1::Payload::hash[::String]) -> ::Temporal::Api::Common::V1::Payload::hash[::String]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Header
          end

          # The type of `#initialize` parameter.
          type init = Header | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Header, Header | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Header, Header | _ToProto]

          type array = ::Array[Header | _ToProto]

          type hash[KEY] = ::Hash[KEY, Header | _ToProto]
        end

        # Identifies a specific workflow within a namespace. Practically speaking, because run_id is a
        #  uuid, a workflow execution is globally unique. Note that many commands allow specifying an empty
        #  run id as a way of saying "target the latest run of the workflow".
        #
        class WorkflowExecution < ::Protobuf::Message
          attr_accessor workflow_id(): ::String

          def workflow_id!: () -> ::String?

          attr_accessor run_id(): ::String

          def run_id!: () -> ::String?

          def initialize: (?workflow_id: ::String, ?run_id: ::String) -> void

          def []: (:workflow_id) -> ::String
                | (:run_id) -> ::String
                | (::Symbol) -> untyped

          def []=: (:workflow_id, ::String) -> ::String
                 | (:run_id, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WorkflowExecution
          end

          # The type of `#initialize` parameter.
          type init = WorkflowExecution | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowExecution, WorkflowExecution | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowExecution, WorkflowExecution | _ToProto]

          type array = ::Array[WorkflowExecution | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowExecution | _ToProto]
        end

        # Represents the identifier used by a workflow author to define the workflow. Typically, the
        #  name of a function. This is sometimes referred to as the workflow's "name"
        #
        class WorkflowType < ::Protobuf::Message
          attr_accessor name(): ::String

          def name!: () -> ::String?

          def initialize: (?name: ::String) -> void

          def []: (:name) -> ::String
                | (::Symbol) -> untyped

          def []=: (:name, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WorkflowType
          end

          # The type of `#initialize` parameter.
          type init = WorkflowType | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowType, WorkflowType | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowType, WorkflowType | _ToProto]

          type array = ::Array[WorkflowType | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowType | _ToProto]
        end

        # Represents the identifier used by a activity author to define the activity. Typically, the
        #  name of a function. This is sometimes referred to as the activity's "name"
        #
        class ActivityType < ::Protobuf::Message
          attr_accessor name(): ::String

          def name!: () -> ::String?

          def initialize: (?name: ::String) -> void

          def []: (:name) -> ::String
                | (::Symbol) -> untyped

          def []=: (:name, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ActivityType
          end

          # The type of `#initialize` parameter.
          type init = ActivityType | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ActivityType, ActivityType | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ActivityType, ActivityType | _ToProto]

          type array = ::Array[ActivityType | _ToProto]

          type hash[KEY] = ::Hash[KEY, ActivityType | _ToProto]
        end

        # How retries ought to be handled, usable by both workflows and activities
        #
        class RetryPolicy < ::Protobuf::Message
          # Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
          #
          attr_accessor initial_interval(): ::Google::Protobuf::Duration?

          # Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
          #
          def initial_interval=: [M < ::Google::Protobuf::Duration::_ToProto] (M?) -> M?
                               | ...

          def initial_interval!: () -> ::Google::Protobuf::Duration?

          # Coefficient used to calculate the next retry interval.
          #  The next retry interval is previous interval multiplied by the coefficient.
          #  Must be 1 or larger.
          #
          attr_accessor backoff_coefficient(): ::Float

          def backoff_coefficient!: () -> ::Float?

          # Maximum interval between retries. Exponential backoff leads to interval increase.
          #  This value is the cap of the increase. Default is 100x of the initial interval.
          #
          attr_accessor maximum_interval(): ::Google::Protobuf::Duration?

          # Maximum interval between retries. Exponential backoff leads to interval increase.
          #  This value is the cap of the increase. Default is 100x of the initial interval.
          #
          def maximum_interval=: [M < ::Google::Protobuf::Duration::_ToProto] (M?) -> M?
                               | ...

          def maximum_interval!: () -> ::Google::Protobuf::Duration?

          # Maximum number of attempts. When exceeded the retries stop even if not expired yet.
          #  1 disables retries. 0 means unlimited (up to the timeouts)
          #
          attr_accessor maximum_attempts(): ::Integer

          def maximum_attempts!: () -> ::Integer?

          # Non-Retryable errors types. Will stop retrying if the error type matches this list. Note that
          #  this is not a substring match, the error *type* (not message) must match exactly.
          #
          attr_accessor non_retryable_error_types(): ::Protobuf::field_array[::String]

          # Non-Retryable errors types. Will stop retrying if the error type matches this list. Note that
          #  this is not a substring match, the error *type* (not message) must match exactly.
          #
          def non_retryable_error_types=: (::Array[::String]) -> ::Array[::String]
                                        | ...

          def non_retryable_error_types!: () -> ::Protobuf::field_array[::String]?

          def initialize: (?initial_interval: ::Google::Protobuf::Duration::init?, ?backoff_coefficient: ::Float, ?maximum_interval: ::Google::Protobuf::Duration::init?, ?maximum_attempts: ::Integer, ?non_retryable_error_types: ::Array[::String]) -> void

          def []: (:initial_interval) -> ::Google::Protobuf::Duration?
                | (:backoff_coefficient) -> ::Float
                | (:maximum_interval) -> ::Google::Protobuf::Duration?
                | (:maximum_attempts) -> ::Integer
                | (:non_retryable_error_types) -> ::Protobuf::field_array[::String]
                | (::Symbol) -> untyped

          def []=: (:initial_interval, ::Google::Protobuf::Duration?) -> ::Google::Protobuf::Duration?
                 | [M < ::Google::Protobuf::Duration::_ToProto] (:initial_interval, M?) -> M?
                 | (:backoff_coefficient, ::Float) -> ::Float
                 | (:maximum_interval, ::Google::Protobuf::Duration?) -> ::Google::Protobuf::Duration?
                 | [M < ::Google::Protobuf::Duration::_ToProto] (:maximum_interval, M?) -> M?
                 | (:maximum_attempts, ::Integer) -> ::Integer
                 | (:non_retryable_error_types, ::Protobuf::field_array[::String]) -> ::Protobuf::field_array[::String]
                 | (:non_retryable_error_types, ::Array[::String]) -> ::Array[::String]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> RetryPolicy
          end

          # The type of `#initialize` parameter.
          type init = RetryPolicy | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[RetryPolicy, RetryPolicy | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, RetryPolicy, RetryPolicy | _ToProto]

          type array = ::Array[RetryPolicy | _ToProto]

          type hash[KEY] = ::Hash[KEY, RetryPolicy | _ToProto]
        end
      end
    end
  end
end
