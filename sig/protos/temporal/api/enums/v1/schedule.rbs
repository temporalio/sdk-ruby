module Temporalio
  module Api
    module Enums
      module V1
        # ScheduleOverlapPolicy controls what happens when a workflow would be started
        #  by a schedule, and is already running.
        #
        class ScheduleOverlapPolicy < ::Protobuf::Enum
          type names = :SCHEDULE_OVERLAP_POLICY_UNSPECIFIED | :SCHEDULE_OVERLAP_POLICY_SKIP | :SCHEDULE_OVERLAP_POLICY_BUFFER_ONE | :SCHEDULE_OVERLAP_POLICY_BUFFER_ALL | :SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER | :SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER | :SCHEDULE_OVERLAP_POLICY_ALLOW_ALL

          type strings = "SCHEDULE_OVERLAP_POLICY_UNSPECIFIED" | "SCHEDULE_OVERLAP_POLICY_SKIP" | "SCHEDULE_OVERLAP_POLICY_BUFFER_ONE" | "SCHEDULE_OVERLAP_POLICY_BUFFER_ALL" | "SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER" | "SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER" | "SCHEDULE_OVERLAP_POLICY_ALLOW_ALL"

          type tags = 0 | 1 | 2 | 3 | 4 | 5 | 6

          type values = names | strings | tags

          attr_reader name(): names

          attr_reader tag(): tags

          SCHEDULE_OVERLAP_POLICY_UNSPECIFIED: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_SKIP (default) means don't start anything. When the
          #  workflow completes, the next scheduled event after that time will be considered.
          #
          SCHEDULE_OVERLAP_POLICY_SKIP: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_BUFFER_ONE means start the workflow again soon as the
          #  current one completes, but only buffer one start in this way. If another start is
          #  supposed to happen when the workflow is running, and one is already buffered, then
          #  only the first one will be started after the running workflow finishes.
          #
          SCHEDULE_OVERLAP_POLICY_BUFFER_ONE: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_BUFFER_ALL means buffer up any number of starts to all
          #  happen sequentially, immediately after the running workflow completes.
          #
          SCHEDULE_OVERLAP_POLICY_BUFFER_ALL: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER means that if there is another workflow
          #  running, cancel it, and start the new one after the old one completes cancellation.
          #
          SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER means that if there is another workflow
          #  running, terminate it and start the new one immediately.
          #
          SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER: ScheduleOverlapPolicy

          # SCHEDULE_OVERLAP_POLICY_ALLOW_ALL means start any number of concurrent workflows.
          #  Note that with this policy, last completion result and last failure will not be
          #  available since workflows are not sequential.
          #
          SCHEDULE_OVERLAP_POLICY_ALLOW_ALL: ScheduleOverlapPolicy

          # The type of `#initialize` parameter.
          type init = ScheduleOverlapPolicy | values

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ScheduleOverlapPolicy, ScheduleOverlapPolicy | values]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ScheduleOverlapPolicy, ScheduleOverlapPolicy | values]

          type array = ::Array[ScheduleOverlapPolicy | values]

          type hash[KEY] = ::Hash[KEY, ScheduleOverlapPolicy | values]
        end
      end
    end
  end
end
