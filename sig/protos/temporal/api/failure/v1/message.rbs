module Temporal
  module Api
    module Failure
      module V1
        class ApplicationFailureInfo < ::Protobuf::Message
          attr_accessor type(): ::String

          def type!: () -> ::String?

          attr_accessor non_retryable(): bool

          def non_retryable!: () -> bool?

          attr_accessor details(): ::Temporal::Api::Common::V1::Payloads?

          def details=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                      | ...

          def details!: () -> ::Temporal::Api::Common::V1::Payloads?

          def initialize: (?type: ::String, ?non_retryable: bool, ?details: ::Temporal::Api::Common::V1::Payloads::init?) -> void

          def []: (:type) -> ::String
                | (:non_retryable) -> bool
                | (:details) -> ::Temporal::Api::Common::V1::Payloads?
                | (::Symbol) -> untyped

          def []=: (:type, ::String) -> ::String
                 | (:non_retryable, bool) -> bool
                 | (:details, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:details, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          def non_retryable?: () -> bool

          interface _ToProto
            def to_proto: () -> ApplicationFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = ApplicationFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ApplicationFailureInfo, ApplicationFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ApplicationFailureInfo, ApplicationFailureInfo | _ToProto]

          type array = ::Array[ApplicationFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, ApplicationFailureInfo | _ToProto]
        end

        class TimeoutFailureInfo < ::Protobuf::Message
          attr_accessor timeout_type(): ::Temporal::Api::Enums::V1::TimeoutType

          def timeout_type=: (::Temporal::Api::Enums::V1::TimeoutType::values) -> ::Temporal::Api::Enums::V1::TimeoutType::values
                           | ...

          def timeout_type!: () -> ::Temporal::Api::Enums::V1::TimeoutType?

          attr_accessor last_heartbeat_details(): ::Temporal::Api::Common::V1::Payloads?

          def last_heartbeat_details=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                                     | ...

          def last_heartbeat_details!: () -> ::Temporal::Api::Common::V1::Payloads?

          def initialize: (?timeout_type: ::Temporal::Api::Enums::V1::TimeoutType::init, ?last_heartbeat_details: ::Temporal::Api::Common::V1::Payloads::init?) -> void

          def []: (:timeout_type) -> ::Temporal::Api::Enums::V1::TimeoutType
                | (:last_heartbeat_details) -> ::Temporal::Api::Common::V1::Payloads?
                | (::Symbol) -> untyped

          def []=: (:timeout_type, ::Temporal::Api::Enums::V1::TimeoutType) -> ::Temporal::Api::Enums::V1::TimeoutType
                 | (:timeout_type, ::Temporal::Api::Enums::V1::TimeoutType::values) -> ::Temporal::Api::Enums::V1::TimeoutType::values
                 | (:last_heartbeat_details, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:last_heartbeat_details, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TimeoutFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = TimeoutFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TimeoutFailureInfo, TimeoutFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TimeoutFailureInfo, TimeoutFailureInfo | _ToProto]

          type array = ::Array[TimeoutFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, TimeoutFailureInfo | _ToProto]
        end

        class CanceledFailureInfo < ::Protobuf::Message
          attr_accessor details(): ::Temporal::Api::Common::V1::Payloads?

          def details=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                      | ...

          def details!: () -> ::Temporal::Api::Common::V1::Payloads?

          def initialize: (?details: ::Temporal::Api::Common::V1::Payloads::init?) -> void

          def []: (:details) -> ::Temporal::Api::Common::V1::Payloads?
                | (::Symbol) -> untyped

          def []=: (:details, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:details, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> CanceledFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = CanceledFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[CanceledFailureInfo, CanceledFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, CanceledFailureInfo, CanceledFailureInfo | _ToProto]

          type array = ::Array[CanceledFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, CanceledFailureInfo | _ToProto]
        end

        class TerminatedFailureInfo < ::Protobuf::Message
          def initialize: () -> void

          interface _ToProto
            def to_proto: () -> TerminatedFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = TerminatedFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TerminatedFailureInfo, TerminatedFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TerminatedFailureInfo, TerminatedFailureInfo | _ToProto]

          type array = ::Array[TerminatedFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, TerminatedFailureInfo | _ToProto]
        end

        class ServerFailureInfo < ::Protobuf::Message
          attr_accessor non_retryable(): bool

          def non_retryable!: () -> bool?

          def initialize: (?non_retryable: bool) -> void

          def []: (:non_retryable) -> bool
                | (::Symbol) -> untyped

          def []=: (:non_retryable, bool) -> bool
                 | (::Symbol, untyped) -> untyped

          def non_retryable?: () -> bool

          interface _ToProto
            def to_proto: () -> ServerFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = ServerFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ServerFailureInfo, ServerFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ServerFailureInfo, ServerFailureInfo | _ToProto]

          type array = ::Array[ServerFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, ServerFailureInfo | _ToProto]
        end

        class ResetWorkflowFailureInfo < ::Protobuf::Message
          attr_accessor last_heartbeat_details(): ::Temporal::Api::Common::V1::Payloads?

          def last_heartbeat_details=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                                     | ...

          def last_heartbeat_details!: () -> ::Temporal::Api::Common::V1::Payloads?

          def initialize: (?last_heartbeat_details: ::Temporal::Api::Common::V1::Payloads::init?) -> void

          def []: (:last_heartbeat_details) -> ::Temporal::Api::Common::V1::Payloads?
                | (::Symbol) -> untyped

          def []=: (:last_heartbeat_details, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:last_heartbeat_details, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ResetWorkflowFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = ResetWorkflowFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ResetWorkflowFailureInfo, ResetWorkflowFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ResetWorkflowFailureInfo, ResetWorkflowFailureInfo | _ToProto]

          type array = ::Array[ResetWorkflowFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, ResetWorkflowFailureInfo | _ToProto]
        end

        class ActivityFailureInfo < ::Protobuf::Message
          attr_accessor scheduled_event_id(): ::Integer

          def scheduled_event_id!: () -> ::Integer?

          attr_accessor started_event_id(): ::Integer

          def started_event_id!: () -> ::Integer?

          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          attr_accessor activity_type(): ::Temporal::Api::Common::V1::ActivityType?

          def activity_type=: [M < ::Temporal::Api::Common::V1::ActivityType::_ToProto] (M?) -> M?
                            | ...

          def activity_type!: () -> ::Temporal::Api::Common::V1::ActivityType?

          attr_accessor activity_id(): ::String

          def activity_id!: () -> ::String?

          attr_accessor retry_state(): ::Temporal::Api::Enums::V1::RetryState

          def retry_state=: (::Temporal::Api::Enums::V1::RetryState::values) -> ::Temporal::Api::Enums::V1::RetryState::values
                          | ...

          def retry_state!: () -> ::Temporal::Api::Enums::V1::RetryState?

          def initialize: (?scheduled_event_id: ::Integer, ?started_event_id: ::Integer, ?identity: ::String, ?activity_type: ::Temporal::Api::Common::V1::ActivityType::init?, ?activity_id: ::String, ?retry_state: ::Temporal::Api::Enums::V1::RetryState::init) -> void

          def []: (:scheduled_event_id) -> ::Integer
                | (:started_event_id) -> ::Integer
                | (:identity) -> ::String
                | (:activity_type) -> ::Temporal::Api::Common::V1::ActivityType?
                | (:activity_id) -> ::String
                | (:retry_state) -> ::Temporal::Api::Enums::V1::RetryState
                | (::Symbol) -> untyped

          def []=: (:scheduled_event_id, ::Integer) -> ::Integer
                 | (:started_event_id, ::Integer) -> ::Integer
                 | (:identity, ::String) -> ::String
                 | (:activity_type, ::Temporal::Api::Common::V1::ActivityType?) -> ::Temporal::Api::Common::V1::ActivityType?
                 | [M < ::Temporal::Api::Common::V1::ActivityType::_ToProto] (:activity_type, M?) -> M?
                 | (:activity_id, ::String) -> ::String
                 | (:retry_state, ::Temporal::Api::Enums::V1::RetryState) -> ::Temporal::Api::Enums::V1::RetryState
                 | (:retry_state, ::Temporal::Api::Enums::V1::RetryState::values) -> ::Temporal::Api::Enums::V1::RetryState::values
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ActivityFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = ActivityFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ActivityFailureInfo, ActivityFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ActivityFailureInfo, ActivityFailureInfo | _ToProto]

          type array = ::Array[ActivityFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, ActivityFailureInfo | _ToProto]
        end

        class ChildWorkflowExecutionFailureInfo < ::Protobuf::Message
          attr_accessor namespace(): ::String

          def namespace!: () -> ::String?

          attr_accessor workflow_execution(): ::Temporal::Api::Common::V1::WorkflowExecution?

          def workflow_execution=: [M < ::Temporal::Api::Common::V1::WorkflowExecution::_ToProto] (M?) -> M?
                                 | ...

          def workflow_execution!: () -> ::Temporal::Api::Common::V1::WorkflowExecution?

          attr_accessor workflow_type(): ::Temporal::Api::Common::V1::WorkflowType?

          def workflow_type=: [M < ::Temporal::Api::Common::V1::WorkflowType::_ToProto] (M?) -> M?
                            | ...

          def workflow_type!: () -> ::Temporal::Api::Common::V1::WorkflowType?

          attr_accessor initiated_event_id(): ::Integer

          def initiated_event_id!: () -> ::Integer?

          attr_accessor started_event_id(): ::Integer

          def started_event_id!: () -> ::Integer?

          attr_accessor retry_state(): ::Temporal::Api::Enums::V1::RetryState

          def retry_state=: (::Temporal::Api::Enums::V1::RetryState::values) -> ::Temporal::Api::Enums::V1::RetryState::values
                          | ...

          def retry_state!: () -> ::Temporal::Api::Enums::V1::RetryState?

          def initialize: (?namespace: ::String, ?workflow_execution: ::Temporal::Api::Common::V1::WorkflowExecution::init?, ?workflow_type: ::Temporal::Api::Common::V1::WorkflowType::init?, ?initiated_event_id: ::Integer, ?started_event_id: ::Integer, ?retry_state: ::Temporal::Api::Enums::V1::RetryState::init) -> void

          def []: (:namespace) -> ::String
                | (:workflow_execution) -> ::Temporal::Api::Common::V1::WorkflowExecution?
                | (:workflow_type) -> ::Temporal::Api::Common::V1::WorkflowType?
                | (:initiated_event_id) -> ::Integer
                | (:started_event_id) -> ::Integer
                | (:retry_state) -> ::Temporal::Api::Enums::V1::RetryState
                | (::Symbol) -> untyped

          def []=: (:namespace, ::String) -> ::String
                 | (:workflow_execution, ::Temporal::Api::Common::V1::WorkflowExecution?) -> ::Temporal::Api::Common::V1::WorkflowExecution?
                 | [M < ::Temporal::Api::Common::V1::WorkflowExecution::_ToProto] (:workflow_execution, M?) -> M?
                 | (:workflow_type, ::Temporal::Api::Common::V1::WorkflowType?) -> ::Temporal::Api::Common::V1::WorkflowType?
                 | [M < ::Temporal::Api::Common::V1::WorkflowType::_ToProto] (:workflow_type, M?) -> M?
                 | (:initiated_event_id, ::Integer) -> ::Integer
                 | (:started_event_id, ::Integer) -> ::Integer
                 | (:retry_state, ::Temporal::Api::Enums::V1::RetryState) -> ::Temporal::Api::Enums::V1::RetryState
                 | (:retry_state, ::Temporal::Api::Enums::V1::RetryState::values) -> ::Temporal::Api::Enums::V1::RetryState::values
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ChildWorkflowExecutionFailureInfo
          end

          # The type of `#initialize` parameter.
          type init = ChildWorkflowExecutionFailureInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ChildWorkflowExecutionFailureInfo, ChildWorkflowExecutionFailureInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ChildWorkflowExecutionFailureInfo, ChildWorkflowExecutionFailureInfo | _ToProto]

          type array = ::Array[ChildWorkflowExecutionFailureInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, ChildWorkflowExecutionFailureInfo | _ToProto]
        end

        class Failure < ::Protobuf::Message
          attr_accessor message(): ::String

          def message!: () -> ::String?

          attr_accessor source(): ::String

          def source!: () -> ::String?

          attr_accessor stack_trace(): ::String

          def stack_trace!: () -> ::String?

          attr_accessor cause(): ::Temporal::Api::Failure::V1::Failure?

          def cause=: [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                    | ...

          def cause!: () -> ::Temporal::Api::Failure::V1::Failure?

          attr_accessor application_failure_info(): ::Temporal::Api::Failure::V1::ApplicationFailureInfo?

          def application_failure_info=: [M < ::Temporal::Api::Failure::V1::ApplicationFailureInfo::_ToProto] (M?) -> M?
                                       | ...

          def application_failure_info!: () -> ::Temporal::Api::Failure::V1::ApplicationFailureInfo?

          attr_accessor timeout_failure_info(): ::Temporal::Api::Failure::V1::TimeoutFailureInfo?

          def timeout_failure_info=: [M < ::Temporal::Api::Failure::V1::TimeoutFailureInfo::_ToProto] (M?) -> M?
                                   | ...

          def timeout_failure_info!: () -> ::Temporal::Api::Failure::V1::TimeoutFailureInfo?

          attr_accessor canceled_failure_info(): ::Temporal::Api::Failure::V1::CanceledFailureInfo?

          def canceled_failure_info=: [M < ::Temporal::Api::Failure::V1::CanceledFailureInfo::_ToProto] (M?) -> M?
                                    | ...

          def canceled_failure_info!: () -> ::Temporal::Api::Failure::V1::CanceledFailureInfo?

          attr_accessor terminated_failure_info(): ::Temporal::Api::Failure::V1::TerminatedFailureInfo?

          def terminated_failure_info=: [M < ::Temporal::Api::Failure::V1::TerminatedFailureInfo::_ToProto] (M?) -> M?
                                      | ...

          def terminated_failure_info!: () -> ::Temporal::Api::Failure::V1::TerminatedFailureInfo?

          attr_accessor server_failure_info(): ::Temporal::Api::Failure::V1::ServerFailureInfo?

          def server_failure_info=: [M < ::Temporal::Api::Failure::V1::ServerFailureInfo::_ToProto] (M?) -> M?
                                  | ...

          def server_failure_info!: () -> ::Temporal::Api::Failure::V1::ServerFailureInfo?

          attr_accessor reset_workflow_failure_info(): ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo?

          def reset_workflow_failure_info=: [M < ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo::_ToProto] (M?) -> M?
                                          | ...

          def reset_workflow_failure_info!: () -> ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo?

          attr_accessor activity_failure_info(): ::Temporal::Api::Failure::V1::ActivityFailureInfo?

          def activity_failure_info=: [M < ::Temporal::Api::Failure::V1::ActivityFailureInfo::_ToProto] (M?) -> M?
                                    | ...

          def activity_failure_info!: () -> ::Temporal::Api::Failure::V1::ActivityFailureInfo?

          attr_accessor child_workflow_execution_failure_info(): ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo?

          def child_workflow_execution_failure_info=: [M < ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo::_ToProto] (M?) -> M?
                                                    | ...

          def child_workflow_execution_failure_info!: () -> ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo?

          def initialize: (?message: ::String, ?source: ::String, ?stack_trace: ::String, ?cause: ::Temporal::Api::Failure::V1::Failure::init?, ?application_failure_info: ::Temporal::Api::Failure::V1::ApplicationFailureInfo::init?, ?timeout_failure_info: ::Temporal::Api::Failure::V1::TimeoutFailureInfo::init?, ?canceled_failure_info: ::Temporal::Api::Failure::V1::CanceledFailureInfo::init?, ?terminated_failure_info: ::Temporal::Api::Failure::V1::TerminatedFailureInfo::init?, ?server_failure_info: ::Temporal::Api::Failure::V1::ServerFailureInfo::init?, ?reset_workflow_failure_info: ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo::init?, ?activity_failure_info: ::Temporal::Api::Failure::V1::ActivityFailureInfo::init?, ?child_workflow_execution_failure_info: ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo::init?) -> void

          def []: (:message) -> ::String
                | (:source) -> ::String
                | (:stack_trace) -> ::String
                | (:cause) -> ::Temporal::Api::Failure::V1::Failure?
                | (:application_failure_info) -> ::Temporal::Api::Failure::V1::ApplicationFailureInfo?
                | (:timeout_failure_info) -> ::Temporal::Api::Failure::V1::TimeoutFailureInfo?
                | (:canceled_failure_info) -> ::Temporal::Api::Failure::V1::CanceledFailureInfo?
                | (:terminated_failure_info) -> ::Temporal::Api::Failure::V1::TerminatedFailureInfo?
                | (:server_failure_info) -> ::Temporal::Api::Failure::V1::ServerFailureInfo?
                | (:reset_workflow_failure_info) -> ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo?
                | (:activity_failure_info) -> ::Temporal::Api::Failure::V1::ActivityFailureInfo?
                | (:child_workflow_execution_failure_info) -> ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo?
                | (::Symbol) -> untyped

          def []=: (:message, ::String) -> ::String
                 | (:source, ::String) -> ::String
                 | (:stack_trace, ::String) -> ::String
                 | (:cause, ::Temporal::Api::Failure::V1::Failure?) -> ::Temporal::Api::Failure::V1::Failure?
                 | [M < ::Temporal::Api::Failure::V1::Failure::_ToProto] (:cause, M?) -> M?
                 | (:application_failure_info, ::Temporal::Api::Failure::V1::ApplicationFailureInfo?) -> ::Temporal::Api::Failure::V1::ApplicationFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::ApplicationFailureInfo::_ToProto] (:application_failure_info, M?) -> M?
                 | (:timeout_failure_info, ::Temporal::Api::Failure::V1::TimeoutFailureInfo?) -> ::Temporal::Api::Failure::V1::TimeoutFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::TimeoutFailureInfo::_ToProto] (:timeout_failure_info, M?) -> M?
                 | (:canceled_failure_info, ::Temporal::Api::Failure::V1::CanceledFailureInfo?) -> ::Temporal::Api::Failure::V1::CanceledFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::CanceledFailureInfo::_ToProto] (:canceled_failure_info, M?) -> M?
                 | (:terminated_failure_info, ::Temporal::Api::Failure::V1::TerminatedFailureInfo?) -> ::Temporal::Api::Failure::V1::TerminatedFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::TerminatedFailureInfo::_ToProto] (:terminated_failure_info, M?) -> M?
                 | (:server_failure_info, ::Temporal::Api::Failure::V1::ServerFailureInfo?) -> ::Temporal::Api::Failure::V1::ServerFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::ServerFailureInfo::_ToProto] (:server_failure_info, M?) -> M?
                 | (:reset_workflow_failure_info, ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo?) -> ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::ResetWorkflowFailureInfo::_ToProto] (:reset_workflow_failure_info, M?) -> M?
                 | (:activity_failure_info, ::Temporal::Api::Failure::V1::ActivityFailureInfo?) -> ::Temporal::Api::Failure::V1::ActivityFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::ActivityFailureInfo::_ToProto] (:activity_failure_info, M?) -> M?
                 | (:child_workflow_execution_failure_info, ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo?) -> ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo?
                 | [M < ::Temporal::Api::Failure::V1::ChildWorkflowExecutionFailureInfo::_ToProto] (:child_workflow_execution_failure_info, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Failure
          end

          # The type of `#initialize` parameter.
          type init = Failure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Failure, Failure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Failure, Failure | _ToProto]

          type array = ::Array[Failure | _ToProto]

          type hash[KEY] = ::Hash[KEY, Failure | _ToProto]
        end
      end
    end
  end
end
