module Temporalio
  module Api
    module Update
      module V1
        # Sepcifies to the gRPC server how the client wants the UpdateWorkflowExecution
        #  call to wait before returning control to the caller.
        #
        class WaitPolicy < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (WaitPolicy) -> String

          # Indicates the update lifecycle stage that the gRPC call should wait for
          #  before returning.
          #
          attr_accessor lifecycle_stage(): ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage

          # Indicates the update lifecycle stage that the gRPC call should wait for
          #  before returning.
          #
          def lifecycle_stage=: (::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::values) -> ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::values
                              | ...

          def lifecycle_stage!: () -> ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage?

          def initialize: (?lifecycle_stage: ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::init) -> void

          def []: (:lifecycle_stage) -> ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage
                | (::Symbol) -> untyped

          def []=: (:lifecycle_stage, ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage) -> ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage
                 | (:lifecycle_stage, ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::values) -> ::Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::values
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WaitPolicy
          end

          # The type of `#initialize` parameter.
          type init = WaitPolicy | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WaitPolicy, WaitPolicy | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WaitPolicy, WaitPolicy | _ToProto]

          type array = ::Array[WaitPolicy | _ToProto]

          type hash[KEY] = ::Hash[KEY, WaitPolicy | _ToProto]
        end

        # The data needed by a client to refer to an previously invoked workflow
        #  execution update process.
        #
        class UpdateRef < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (UpdateRef) -> String

          attr_accessor workflow_execution(): ::Temporalio::Api::Common::V1::WorkflowExecution?

          def workflow_execution=: [M < ::Temporalio::Api::Common::V1::WorkflowExecution::_ToProto] (M?) -> M?
                                 | ...

          def workflow_execution!: () -> ::Temporalio::Api::Common::V1::WorkflowExecution?

          attr_accessor update_id(): ::String

          def update_id!: () -> ::String?

          def initialize: (?workflow_execution: ::Temporalio::Api::Common::V1::WorkflowExecution::init?, ?update_id: ::String) -> void

          def []: (:workflow_execution) -> ::Temporalio::Api::Common::V1::WorkflowExecution?
                | (:update_id) -> ::String
                | (::Symbol) -> untyped

          def []=: (:workflow_execution, ::Temporalio::Api::Common::V1::WorkflowExecution?) -> ::Temporalio::Api::Common::V1::WorkflowExecution?
                 | [M < ::Temporalio::Api::Common::V1::WorkflowExecution::_ToProto] (:workflow_execution, M?) -> M?
                 | (:update_id, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> UpdateRef
          end

          # The type of `#initialize` parameter.
          type init = UpdateRef | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[UpdateRef, UpdateRef | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, UpdateRef, UpdateRef | _ToProto]

          type array = ::Array[UpdateRef | _ToProto]

          type hash[KEY] = ::Hash[KEY, UpdateRef | _ToProto]
        end

        # The outcome of a workflow update - success or failure.
        #
        class Outcome < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Outcome) -> String

          attr_accessor success(): ::Temporalio::Api::Common::V1::Payloads?

          def success=: [M < ::Temporalio::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                      | ...

          def success!: () -> ::Temporalio::Api::Common::V1::Payloads?

          attr_accessor failure(): ::Temporalio::Api::Failure::V1::Failure?

          def failure=: [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                      | ...

          def failure!: () -> ::Temporalio::Api::Failure::V1::Failure?

          def initialize: (?success: ::Temporalio::Api::Common::V1::Payloads::init?, ?failure: ::Temporalio::Api::Failure::V1::Failure::init?) -> void

          def []: (:success) -> ::Temporalio::Api::Common::V1::Payloads?
                | (:failure) -> ::Temporalio::Api::Failure::V1::Failure?
                | (::Symbol) -> untyped

          def []=: (:success, ::Temporalio::Api::Common::V1::Payloads?) -> ::Temporalio::Api::Common::V1::Payloads?
                 | [M < ::Temporalio::Api::Common::V1::Payloads::_ToProto] (:success, M?) -> M?
                 | (:failure, ::Temporalio::Api::Failure::V1::Failure?) -> ::Temporalio::Api::Failure::V1::Failure?
                 | [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (:failure, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Outcome
          end

          # The type of `#initialize` parameter.
          type init = Outcome | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Outcome, Outcome | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Outcome, Outcome | _ToProto]

          type array = ::Array[Outcome | _ToProto]

          type hash[KEY] = ::Hash[KEY, Outcome | _ToProto]
        end

        # Metadata about a workflow execution update.
        #
        class Meta < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Meta) -> String

          # An ID with workflow-scoped uniqueness for this update
          #
          attr_accessor update_id(): ::String

          def update_id!: () -> ::String?

          # A string identifying the agent that requested this update.
          #
          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          def initialize: (?update_id: ::String, ?identity: ::String) -> void

          def []: (:update_id) -> ::String
                | (:identity) -> ::String
                | (::Symbol) -> untyped

          def []=: (:update_id, ::String) -> ::String
                 | (:identity, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Meta
          end

          # The type of `#initialize` parameter.
          type init = Meta | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Meta, Meta | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Meta, Meta | _ToProto]

          type array = ::Array[Meta | _ToProto]

          type hash[KEY] = ::Hash[KEY, Meta | _ToProto]
        end

        class Input < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Input) -> String

          # Headers that are passed with the update from the requesting entity.
          #  These can include things like auth or tracing tokens.
          #
          attr_accessor header(): ::Temporalio::Api::Common::V1::Header?

          # Headers that are passed with the update from the requesting entity.
          #  These can include things like auth or tracing tokens.
          #
          def header=: [M < ::Temporalio::Api::Common::V1::Header::_ToProto] (M?) -> M?
                     | ...

          def header!: () -> ::Temporalio::Api::Common::V1::Header?

          # The name of the input handler to invoke on the target workflow
          #
          attr_accessor name(): ::String

          def name!: () -> ::String?

          # The arguments to pass to the named handler.
          #
          attr_accessor args(): ::Temporalio::Api::Common::V1::Payloads?

          # The arguments to pass to the named handler.
          #
          def args=: [M < ::Temporalio::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                   | ...

          def args!: () -> ::Temporalio::Api::Common::V1::Payloads?

          def initialize: (?header: ::Temporalio::Api::Common::V1::Header::init?, ?name: ::String, ?args: ::Temporalio::Api::Common::V1::Payloads::init?) -> void

          def []: (:header) -> ::Temporalio::Api::Common::V1::Header?
                | (:name) -> ::String
                | (:args) -> ::Temporalio::Api::Common::V1::Payloads?
                | (::Symbol) -> untyped

          def []=: (:header, ::Temporalio::Api::Common::V1::Header?) -> ::Temporalio::Api::Common::V1::Header?
                 | [M < ::Temporalio::Api::Common::V1::Header::_ToProto] (:header, M?) -> M?
                 | (:name, ::String) -> ::String
                 | (:args, ::Temporalio::Api::Common::V1::Payloads?) -> ::Temporalio::Api::Common::V1::Payloads?
                 | [M < ::Temporalio::Api::Common::V1::Payloads::_ToProto] (:args, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Input
          end

          # The type of `#initialize` parameter.
          type init = Input | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Input, Input | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Input, Input | _ToProto]

          type array = ::Array[Input | _ToProto]

          type hash[KEY] = ::Hash[KEY, Input | _ToProto]
        end

        # The client request that triggers a workflow execution update
        #
        class Request < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Request) -> String

          attr_accessor meta(): ::Temporalio::Api::Update::V1::Meta?

          def meta=: [M < ::Temporalio::Api::Update::V1::Meta::_ToProto] (M?) -> M?
                   | ...

          def meta!: () -> ::Temporalio::Api::Update::V1::Meta?

          attr_accessor input(): ::Temporalio::Api::Update::V1::Input?

          def input=: [M < ::Temporalio::Api::Update::V1::Input::_ToProto] (M?) -> M?
                    | ...

          def input!: () -> ::Temporalio::Api::Update::V1::Input?

          def initialize: (?meta: ::Temporalio::Api::Update::V1::Meta::init?, ?input: ::Temporalio::Api::Update::V1::Input::init?) -> void

          def []: (:meta) -> ::Temporalio::Api::Update::V1::Meta?
                | (:input) -> ::Temporalio::Api::Update::V1::Input?
                | (::Symbol) -> untyped

          def []=: (:meta, ::Temporalio::Api::Update::V1::Meta?) -> ::Temporalio::Api::Update::V1::Meta?
                 | [M < ::Temporalio::Api::Update::V1::Meta::_ToProto] (:meta, M?) -> M?
                 | (:input, ::Temporalio::Api::Update::V1::Input?) -> ::Temporalio::Api::Update::V1::Input?
                 | [M < ::Temporalio::Api::Update::V1::Input::_ToProto] (:input, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Request
          end

          # The type of `#initialize` parameter.
          type init = Request | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Request, Request | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Request, Request | _ToProto]

          type array = ::Array[Request | _ToProto]

          type hash[KEY] = ::Hash[KEY, Request | _ToProto]
        end

        # An update protocol message indicating that a workflow execution update has
        #  been rejected.
        #
        class Rejection < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Rejection) -> String

          attr_accessor rejected_request_message_id(): ::String

          def rejected_request_message_id!: () -> ::String?

          attr_accessor rejected_request_sequencing_event_id(): ::Integer

          def rejected_request_sequencing_event_id!: () -> ::Integer?

          attr_accessor rejected_request(): ::Temporalio::Api::Update::V1::Request?

          def rejected_request=: [M < ::Temporalio::Api::Update::V1::Request::_ToProto] (M?) -> M?
                               | ...

          def rejected_request!: () -> ::Temporalio::Api::Update::V1::Request?

          attr_accessor failure(): ::Temporalio::Api::Failure::V1::Failure?

          def failure=: [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (M?) -> M?
                      | ...

          def failure!: () -> ::Temporalio::Api::Failure::V1::Failure?

          def initialize: (?rejected_request_message_id: ::String, ?rejected_request_sequencing_event_id: ::Integer, ?rejected_request: ::Temporalio::Api::Update::V1::Request::init?, ?failure: ::Temporalio::Api::Failure::V1::Failure::init?) -> void

          def []: (:rejected_request_message_id) -> ::String
                | (:rejected_request_sequencing_event_id) -> ::Integer
                | (:rejected_request) -> ::Temporalio::Api::Update::V1::Request?
                | (:failure) -> ::Temporalio::Api::Failure::V1::Failure?
                | (::Symbol) -> untyped

          def []=: (:rejected_request_message_id, ::String) -> ::String
                 | (:rejected_request_sequencing_event_id, ::Integer) -> ::Integer
                 | (:rejected_request, ::Temporalio::Api::Update::V1::Request?) -> ::Temporalio::Api::Update::V1::Request?
                 | [M < ::Temporalio::Api::Update::V1::Request::_ToProto] (:rejected_request, M?) -> M?
                 | (:failure, ::Temporalio::Api::Failure::V1::Failure?) -> ::Temporalio::Api::Failure::V1::Failure?
                 | [M < ::Temporalio::Api::Failure::V1::Failure::_ToProto] (:failure, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Rejection
          end

          # The type of `#initialize` parameter.
          type init = Rejection | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Rejection, Rejection | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Rejection, Rejection | _ToProto]

          type array = ::Array[Rejection | _ToProto]

          type hash[KEY] = ::Hash[KEY, Rejection | _ToProto]
        end

        # An update protocol message indicating that a workflow execution update has
        #  been accepted (i.e. passed the worker-side validation phase).
        #
        class Acceptance < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Acceptance) -> String

          attr_accessor accepted_request_message_id(): ::String

          def accepted_request_message_id!: () -> ::String?

          attr_accessor accepted_request_sequencing_event_id(): ::Integer

          def accepted_request_sequencing_event_id!: () -> ::Integer?

          attr_accessor accepted_request(): ::Temporalio::Api::Update::V1::Request?

          def accepted_request=: [M < ::Temporalio::Api::Update::V1::Request::_ToProto] (M?) -> M?
                               | ...

          def accepted_request!: () -> ::Temporalio::Api::Update::V1::Request?

          def initialize: (?accepted_request_message_id: ::String, ?accepted_request_sequencing_event_id: ::Integer, ?accepted_request: ::Temporalio::Api::Update::V1::Request::init?) -> void

          def []: (:accepted_request_message_id) -> ::String
                | (:accepted_request_sequencing_event_id) -> ::Integer
                | (:accepted_request) -> ::Temporalio::Api::Update::V1::Request?
                | (::Symbol) -> untyped

          def []=: (:accepted_request_message_id, ::String) -> ::String
                 | (:accepted_request_sequencing_event_id, ::Integer) -> ::Integer
                 | (:accepted_request, ::Temporalio::Api::Update::V1::Request?) -> ::Temporalio::Api::Update::V1::Request?
                 | [M < ::Temporalio::Api::Update::V1::Request::_ToProto] (:accepted_request, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Acceptance
          end

          # The type of `#initialize` parameter.
          type init = Acceptance | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Acceptance, Acceptance | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Acceptance, Acceptance | _ToProto]

          type array = ::Array[Acceptance | _ToProto]

          type hash[KEY] = ::Hash[KEY, Acceptance | _ToProto]
        end

        # An update protocol message indicating that a workflow execution update has
        #  completed with the contained outcome.
        #
        class Response < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (Response) -> String

          attr_accessor meta(): ::Temporalio::Api::Update::V1::Meta?

          def meta=: [M < ::Temporalio::Api::Update::V1::Meta::_ToProto] (M?) -> M?
                   | ...

          def meta!: () -> ::Temporalio::Api::Update::V1::Meta?

          attr_accessor outcome(): ::Temporalio::Api::Update::V1::Outcome?

          def outcome=: [M < ::Temporalio::Api::Update::V1::Outcome::_ToProto] (M?) -> M?
                      | ...

          def outcome!: () -> ::Temporalio::Api::Update::V1::Outcome?

          def initialize: (?meta: ::Temporalio::Api::Update::V1::Meta::init?, ?outcome: ::Temporalio::Api::Update::V1::Outcome::init?) -> void

          def []: (:meta) -> ::Temporalio::Api::Update::V1::Meta?
                | (:outcome) -> ::Temporalio::Api::Update::V1::Outcome?
                | (::Symbol) -> untyped

          def []=: (:meta, ::Temporalio::Api::Update::V1::Meta?) -> ::Temporalio::Api::Update::V1::Meta?
                 | [M < ::Temporalio::Api::Update::V1::Meta::_ToProto] (:meta, M?) -> M?
                 | (:outcome, ::Temporalio::Api::Update::V1::Outcome?) -> ::Temporalio::Api::Update::V1::Outcome?
                 | [M < ::Temporalio::Api::Update::V1::Outcome::_ToProto] (:outcome, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> Response
          end

          # The type of `#initialize` parameter.
          type init = Response | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[Response, Response | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Response, Response | _ToProto]

          type array = ::Array[Response | _ToProto]

          type hash[KEY] = ::Hash[KEY, Response | _ToProto]
        end
      end
    end
  end
end
