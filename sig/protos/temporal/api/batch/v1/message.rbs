module Temporal
  module Api
    module Batch
      module V1
        class BatchOperationInfo < ::Protobuf::Message
          # Batch job ID
          #
          attr_accessor job_id(): ::String

          def job_id!: () -> ::String?

          # Batch operation state
          #
          attr_accessor state(): ::Temporal::Api::Enums::V1::BatchOperationState

          # Batch operation state
          #
          def state=: (::Temporal::Api::Enums::V1::BatchOperationState::values) -> ::Temporal::Api::Enums::V1::BatchOperationState::values
                    | ...

          def state!: () -> ::Temporal::Api::Enums::V1::BatchOperationState?

          # Batch operation start time
          #
          attr_accessor start_time(): ::Google::Protobuf::Timestamp?

          # Batch operation start time
          #
          def start_time=: [M < ::Google::Protobuf::Timestamp::_ToProto] (M?) -> M?
                         | ...

          def start_time!: () -> ::Google::Protobuf::Timestamp?

          # Batch operation close time
          #
          attr_accessor close_time(): ::Google::Protobuf::Timestamp?

          # Batch operation close time
          #
          def close_time=: [M < ::Google::Protobuf::Timestamp::_ToProto] (M?) -> M?
                         | ...

          def close_time!: () -> ::Google::Protobuf::Timestamp?

          def initialize: (?job_id: ::String, ?state: ::Temporal::Api::Enums::V1::BatchOperationState::init, ?start_time: ::Google::Protobuf::Timestamp::init?, ?close_time: ::Google::Protobuf::Timestamp::init?) -> void

          def []: (:job_id) -> ::String
                | (:state) -> ::Temporal::Api::Enums::V1::BatchOperationState
                | (:start_time) -> ::Google::Protobuf::Timestamp?
                | (:close_time) -> ::Google::Protobuf::Timestamp?
                | (::Symbol) -> untyped

          def []=: (:job_id, ::String) -> ::String
                 | (:state, ::Temporal::Api::Enums::V1::BatchOperationState) -> ::Temporal::Api::Enums::V1::BatchOperationState
                 | (:state, ::Temporal::Api::Enums::V1::BatchOperationState::values) -> ::Temporal::Api::Enums::V1::BatchOperationState::values
                 | (:start_time, ::Google::Protobuf::Timestamp?) -> ::Google::Protobuf::Timestamp?
                 | [M < ::Google::Protobuf::Timestamp::_ToProto] (:start_time, M?) -> M?
                 | (:close_time, ::Google::Protobuf::Timestamp?) -> ::Google::Protobuf::Timestamp?
                 | [M < ::Google::Protobuf::Timestamp::_ToProto] (:close_time, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> BatchOperationInfo
          end

          # The type of `#initialize` parameter.
          type init = BatchOperationInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[BatchOperationInfo, BatchOperationInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BatchOperationInfo, BatchOperationInfo | _ToProto]

          type array = ::Array[BatchOperationInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, BatchOperationInfo | _ToProto]
        end

        # BatchOperationTermination sends terminate requests to batch workflows.
        #  Keep the parameter in sync with temporal.api.workflowservice.v1.TerminateWorkflowExecutionRequest.
        #  Ignore first_execution_run_id because this is used for single workflow operation.
        #
        class BatchOperationTermination < ::Protobuf::Message
          # Reason of terminate workflows
          #
          attr_accessor reason(): ::String

          def reason!: () -> ::String?

          # Serialized value(s) to provide to the termination event
          #
          attr_accessor details(): ::Temporal::Api::Common::V1::Payloads?

          # Serialized value(s) to provide to the termination event
          #
          def details=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                      | ...

          def details!: () -> ::Temporal::Api::Common::V1::Payloads?

          # The identity of the worker/client
          #
          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          def initialize: (?reason: ::String, ?details: ::Temporal::Api::Common::V1::Payloads::init?, ?identity: ::String) -> void

          def []: (:reason) -> ::String
                | (:details) -> ::Temporal::Api::Common::V1::Payloads?
                | (:identity) -> ::String
                | (::Symbol) -> untyped

          def []=: (:reason, ::String) -> ::String
                 | (:details, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:details, M?) -> M?
                 | (:identity, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> BatchOperationTermination
          end

          # The type of `#initialize` parameter.
          type init = BatchOperationTermination | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[BatchOperationTermination, BatchOperationTermination | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BatchOperationTermination, BatchOperationTermination | _ToProto]

          type array = ::Array[BatchOperationTermination | _ToProto]

          type hash[KEY] = ::Hash[KEY, BatchOperationTermination | _ToProto]
        end

        # BatchOperationSignal sends signals to batch workflows.
        #  Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
        #
        class BatchOperationSignal < ::Protobuf::Message
          # The workflow author-defined name of the signal to send to the workflow
          #
          attr_accessor signal(): ::String

          def signal!: () -> ::String?

          # Serialized value(s) to provide with the signal
          #
          attr_accessor input(): ::Temporal::Api::Common::V1::Payloads?

          # Serialized value(s) to provide with the signal
          #
          def input=: [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (M?) -> M?
                    | ...

          def input!: () -> ::Temporal::Api::Common::V1::Payloads?

          # Headers that are passed with the signal to the processing workflow.
          #  These can include things like auth or tracing tokens.
          #
          attr_accessor header(): ::Temporal::Api::Common::V1::Header?

          # Headers that are passed with the signal to the processing workflow.
          #  These can include things like auth or tracing tokens.
          #
          def header=: [M < ::Temporal::Api::Common::V1::Header::_ToProto] (M?) -> M?
                     | ...

          def header!: () -> ::Temporal::Api::Common::V1::Header?

          # The identity of the worker/client
          #
          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          def initialize: (?signal: ::String, ?input: ::Temporal::Api::Common::V1::Payloads::init?, ?header: ::Temporal::Api::Common::V1::Header::init?, ?identity: ::String) -> void

          def []: (:signal) -> ::String
                | (:input) -> ::Temporal::Api::Common::V1::Payloads?
                | (:header) -> ::Temporal::Api::Common::V1::Header?
                | (:identity) -> ::String
                | (::Symbol) -> untyped

          def []=: (:signal, ::String) -> ::String
                 | (:input, ::Temporal::Api::Common::V1::Payloads?) -> ::Temporal::Api::Common::V1::Payloads?
                 | [M < ::Temporal::Api::Common::V1::Payloads::_ToProto] (:input, M?) -> M?
                 | (:header, ::Temporal::Api::Common::V1::Header?) -> ::Temporal::Api::Common::V1::Header?
                 | [M < ::Temporal::Api::Common::V1::Header::_ToProto] (:header, M?) -> M?
                 | (:identity, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> BatchOperationSignal
          end

          # The type of `#initialize` parameter.
          type init = BatchOperationSignal | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[BatchOperationSignal, BatchOperationSignal | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BatchOperationSignal, BatchOperationSignal | _ToProto]

          type array = ::Array[BatchOperationSignal | _ToProto]

          type hash[KEY] = ::Hash[KEY, BatchOperationSignal | _ToProto]
        end

        # BatchOperationCancellation sends cancel requests to batch workflows.
        #  Keep the parameter in sync with temporal.api.workflowservice.v1.RequestCancelWorkflowExecutionRequest.
        #  Ignore first_execution_run_id because this is used for single workflow operation.
        #
        class BatchOperationCancellation < ::Protobuf::Message
          # Reason of cancel workflows
          #
          attr_accessor reason(): ::String

          def reason!: () -> ::String?

          # The identity of the worker/client
          #
          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          def initialize: (?reason: ::String, ?identity: ::String) -> void

          def []: (:reason) -> ::String
                | (:identity) -> ::String
                | (::Symbol) -> untyped

          def []=: (:reason, ::String) -> ::String
                 | (:identity, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> BatchOperationCancellation
          end

          # The type of `#initialize` parameter.
          type init = BatchOperationCancellation | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[BatchOperationCancellation, BatchOperationCancellation | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BatchOperationCancellation, BatchOperationCancellation | _ToProto]

          type array = ::Array[BatchOperationCancellation | _ToProto]

          type hash[KEY] = ::Hash[KEY, BatchOperationCancellation | _ToProto]
        end
      end
    end
  end
end
