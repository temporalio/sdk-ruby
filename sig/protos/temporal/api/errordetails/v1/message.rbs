module Temporalio
  module Api
    module ErrorDetails
      module V1
        class NotFoundFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (NotFoundFailure) -> String

          attr_accessor current_cluster(): ::String

          def current_cluster!: () -> ::String?

          attr_accessor active_cluster(): ::String

          def active_cluster!: () -> ::String?

          def initialize: (?current_cluster: ::String, ?active_cluster: ::String) -> void

          def []: (:current_cluster) -> ::String
                | (:active_cluster) -> ::String
                | (::Symbol) -> untyped

          def []=: (:current_cluster, ::String) -> ::String
                 | (:active_cluster, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> NotFoundFailure
          end

          # The type of `#initialize` parameter.
          type init = NotFoundFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[NotFoundFailure, NotFoundFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, NotFoundFailure, NotFoundFailure | _ToProto]

          type array = ::Array[NotFoundFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, NotFoundFailure | _ToProto]
        end

        class WorkflowExecutionAlreadyStartedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (WorkflowExecutionAlreadyStartedFailure) -> String

          attr_accessor start_request_id(): ::String

          def start_request_id!: () -> ::String?

          attr_accessor run_id(): ::String

          def run_id!: () -> ::String?

          def initialize: (?start_request_id: ::String, ?run_id: ::String) -> void

          def []: (:start_request_id) -> ::String
                | (:run_id) -> ::String
                | (::Symbol) -> untyped

          def []=: (:start_request_id, ::String) -> ::String
                 | (:run_id, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> WorkflowExecutionAlreadyStartedFailure
          end

          # The type of `#initialize` parameter.
          type init = WorkflowExecutionAlreadyStartedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowExecutionAlreadyStartedFailure, WorkflowExecutionAlreadyStartedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowExecutionAlreadyStartedFailure, WorkflowExecutionAlreadyStartedFailure | _ToProto]

          type array = ::Array[WorkflowExecutionAlreadyStartedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowExecutionAlreadyStartedFailure | _ToProto]
        end

        class NamespaceNotActiveFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (NamespaceNotActiveFailure) -> String

          attr_accessor namespace(): ::String

          def namespace!: () -> ::String?

          attr_accessor current_cluster(): ::String

          def current_cluster!: () -> ::String?

          attr_accessor active_cluster(): ::String

          def active_cluster!: () -> ::String?

          def initialize: (?namespace: ::String, ?current_cluster: ::String, ?active_cluster: ::String) -> void

          def []: (:namespace) -> ::String
                | (:current_cluster) -> ::String
                | (:active_cluster) -> ::String
                | (::Symbol) -> untyped

          def []=: (:namespace, ::String) -> ::String
                 | (:current_cluster, ::String) -> ::String
                 | (:active_cluster, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> NamespaceNotActiveFailure
          end

          # The type of `#initialize` parameter.
          type init = NamespaceNotActiveFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[NamespaceNotActiveFailure, NamespaceNotActiveFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, NamespaceNotActiveFailure, NamespaceNotActiveFailure | _ToProto]

          type array = ::Array[NamespaceNotActiveFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, NamespaceNotActiveFailure | _ToProto]
        end

        class NamespaceInvalidStateFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (NamespaceInvalidStateFailure) -> String

          attr_accessor namespace(): ::String

          def namespace!: () -> ::String?

          # Current state of the requested namespace.
          #
          attr_accessor state(): ::Temporalio::Api::Enums::V1::NamespaceState

          # Current state of the requested namespace.
          #
          def state=: (::Temporalio::Api::Enums::V1::NamespaceState::values) -> ::Temporalio::Api::Enums::V1::NamespaceState::values
                    | ...

          def state!: () -> ::Temporalio::Api::Enums::V1::NamespaceState?

          # Allowed namespace states for requested operation.
          #  For example NAMESPACE_STATE_DELETED is forbidden for most operations but allowed for DescribeNamespace.
          #
          attr_accessor allowed_states(): ::Temporalio::Api::Enums::V1::NamespaceState::field_array

          # Allowed namespace states for requested operation.
          #  For example NAMESPACE_STATE_DELETED is forbidden for most operations but allowed for DescribeNamespace.
          #
          def allowed_states=: (::Temporalio::Api::Enums::V1::NamespaceState::array) -> ::Temporalio::Api::Enums::V1::NamespaceState::array
                             | ...

          def allowed_states!: () -> ::Temporalio::Api::Enums::V1::NamespaceState::field_array?

          def initialize: (?namespace: ::String, ?state: ::Temporalio::Api::Enums::V1::NamespaceState::init, ?allowed_states: ::Temporalio::Api::Enums::V1::NamespaceState::array) -> void

          def []: (:namespace) -> ::String
                | (:state) -> ::Temporalio::Api::Enums::V1::NamespaceState
                | (:allowed_states) -> ::Temporalio::Api::Enums::V1::NamespaceState::field_array
                | (::Symbol) -> untyped

          def []=: (:namespace, ::String) -> ::String
                 | (:state, ::Temporalio::Api::Enums::V1::NamespaceState) -> ::Temporalio::Api::Enums::V1::NamespaceState
                 | (:state, ::Temporalio::Api::Enums::V1::NamespaceState::values) -> ::Temporalio::Api::Enums::V1::NamespaceState::values
                 | (:allowed_states, ::Temporalio::Api::Enums::V1::NamespaceState::field_array) -> ::Temporalio::Api::Enums::V1::NamespaceState::field_array
                 | (:allowed_states, ::Temporalio::Api::Enums::V1::NamespaceState::array) -> ::Temporalio::Api::Enums::V1::NamespaceState::array
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> NamespaceInvalidStateFailure
          end

          # The type of `#initialize` parameter.
          type init = NamespaceInvalidStateFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[NamespaceInvalidStateFailure, NamespaceInvalidStateFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, NamespaceInvalidStateFailure, NamespaceInvalidStateFailure | _ToProto]

          type array = ::Array[NamespaceInvalidStateFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, NamespaceInvalidStateFailure | _ToProto]
        end

        class NamespaceNotFoundFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (NamespaceNotFoundFailure) -> String

          attr_accessor namespace(): ::String

          def namespace!: () -> ::String?

          def initialize: (?namespace: ::String) -> void

          def []: (:namespace) -> ::String
                | (::Symbol) -> untyped

          def []=: (:namespace, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> NamespaceNotFoundFailure
          end

          # The type of `#initialize` parameter.
          type init = NamespaceNotFoundFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[NamespaceNotFoundFailure, NamespaceNotFoundFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, NamespaceNotFoundFailure, NamespaceNotFoundFailure | _ToProto]

          type array = ::Array[NamespaceNotFoundFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, NamespaceNotFoundFailure | _ToProto]
        end

        class NamespaceAlreadyExistsFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (NamespaceAlreadyExistsFailure) -> String

          def initialize: () -> void

          interface _ToProto
            def to_proto: () -> NamespaceAlreadyExistsFailure
          end

          # The type of `#initialize` parameter.
          type init = NamespaceAlreadyExistsFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[NamespaceAlreadyExistsFailure, NamespaceAlreadyExistsFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, NamespaceAlreadyExistsFailure, NamespaceAlreadyExistsFailure | _ToProto]

          type array = ::Array[NamespaceAlreadyExistsFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, NamespaceAlreadyExistsFailure | _ToProto]
        end

        class ClientVersionNotSupportedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (ClientVersionNotSupportedFailure) -> String

          attr_accessor client_version(): ::String

          def client_version!: () -> ::String?

          attr_accessor client_name(): ::String

          def client_name!: () -> ::String?

          attr_accessor supported_versions(): ::String

          def supported_versions!: () -> ::String?

          def initialize: (?client_version: ::String, ?client_name: ::String, ?supported_versions: ::String) -> void

          def []: (:client_version) -> ::String
                | (:client_name) -> ::String
                | (:supported_versions) -> ::String
                | (::Symbol) -> untyped

          def []=: (:client_version, ::String) -> ::String
                 | (:client_name, ::String) -> ::String
                 | (:supported_versions, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ClientVersionNotSupportedFailure
          end

          # The type of `#initialize` parameter.
          type init = ClientVersionNotSupportedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ClientVersionNotSupportedFailure, ClientVersionNotSupportedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ClientVersionNotSupportedFailure, ClientVersionNotSupportedFailure | _ToProto]

          type array = ::Array[ClientVersionNotSupportedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, ClientVersionNotSupportedFailure | _ToProto]
        end

        class ServerVersionNotSupportedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (ServerVersionNotSupportedFailure) -> String

          attr_accessor server_version(): ::String

          def server_version!: () -> ::String?

          attr_accessor client_supported_server_versions(): ::String

          def client_supported_server_versions!: () -> ::String?

          def initialize: (?server_version: ::String, ?client_supported_server_versions: ::String) -> void

          def []: (:server_version) -> ::String
                | (:client_supported_server_versions) -> ::String
                | (::Symbol) -> untyped

          def []=: (:server_version, ::String) -> ::String
                 | (:client_supported_server_versions, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ServerVersionNotSupportedFailure
          end

          # The type of `#initialize` parameter.
          type init = ServerVersionNotSupportedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ServerVersionNotSupportedFailure, ServerVersionNotSupportedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ServerVersionNotSupportedFailure, ServerVersionNotSupportedFailure | _ToProto]

          type array = ::Array[ServerVersionNotSupportedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, ServerVersionNotSupportedFailure | _ToProto]
        end

        class CancellationAlreadyRequestedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (CancellationAlreadyRequestedFailure) -> String

          def initialize: () -> void

          interface _ToProto
            def to_proto: () -> CancellationAlreadyRequestedFailure
          end

          # The type of `#initialize` parameter.
          type init = CancellationAlreadyRequestedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[CancellationAlreadyRequestedFailure, CancellationAlreadyRequestedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, CancellationAlreadyRequestedFailure, CancellationAlreadyRequestedFailure | _ToProto]

          type array = ::Array[CancellationAlreadyRequestedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, CancellationAlreadyRequestedFailure | _ToProto]
        end

        class QueryFailedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (QueryFailedFailure) -> String

          def initialize: () -> void

          interface _ToProto
            def to_proto: () -> QueryFailedFailure
          end

          # The type of `#initialize` parameter.
          type init = QueryFailedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[QueryFailedFailure, QueryFailedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, QueryFailedFailure, QueryFailedFailure | _ToProto]

          type array = ::Array[QueryFailedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, QueryFailedFailure | _ToProto]
        end

        class PermissionDeniedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (PermissionDeniedFailure) -> String

          attr_accessor reason(): ::String

          def reason!: () -> ::String?

          def initialize: (?reason: ::String) -> void

          def []: (:reason) -> ::String
                | (::Symbol) -> untyped

          def []=: (:reason, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> PermissionDeniedFailure
          end

          # The type of `#initialize` parameter.
          type init = PermissionDeniedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[PermissionDeniedFailure, PermissionDeniedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, PermissionDeniedFailure, PermissionDeniedFailure | _ToProto]

          type array = ::Array[PermissionDeniedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, PermissionDeniedFailure | _ToProto]
        end

        class ResourceExhaustedFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (ResourceExhaustedFailure) -> String

          attr_accessor cause(): ::Temporalio::Api::Enums::V1::ResourceExhaustedCause

          def cause=: (::Temporalio::Api::Enums::V1::ResourceExhaustedCause::values) -> ::Temporalio::Api::Enums::V1::ResourceExhaustedCause::values
                    | ...

          def cause!: () -> ::Temporalio::Api::Enums::V1::ResourceExhaustedCause?

          def initialize: (?cause: ::Temporalio::Api::Enums::V1::ResourceExhaustedCause::init) -> void

          def []: (:cause) -> ::Temporalio::Api::Enums::V1::ResourceExhaustedCause
                | (::Symbol) -> untyped

          def []=: (:cause, ::Temporalio::Api::Enums::V1::ResourceExhaustedCause) -> ::Temporalio::Api::Enums::V1::ResourceExhaustedCause
                 | (:cause, ::Temporalio::Api::Enums::V1::ResourceExhaustedCause::values) -> ::Temporalio::Api::Enums::V1::ResourceExhaustedCause::values
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> ResourceExhaustedFailure
          end

          # The type of `#initialize` parameter.
          type init = ResourceExhaustedFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[ResourceExhaustedFailure, ResourceExhaustedFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, ResourceExhaustedFailure, ResourceExhaustedFailure | _ToProto]

          type array = ::Array[ResourceExhaustedFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, ResourceExhaustedFailure | _ToProto]
        end

        class SystemWorkflowFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (SystemWorkflowFailure) -> String

          # WorkflowId and RunId of the Temporal system workflow performing the underlying operation.
          #  Looking up the info of the system workflow run may help identify the issue causing the failure.
          #
          attr_accessor workflow_execution(): ::Temporalio::Api::Common::V1::WorkflowExecution?

          # WorkflowId and RunId of the Temporal system workflow performing the underlying operation.
          #  Looking up the info of the system workflow run may help identify the issue causing the failure.
          #
          def workflow_execution=: [M < ::Temporalio::Api::Common::V1::WorkflowExecution::_ToProto] (M?) -> M?
                                 | ...

          def workflow_execution!: () -> ::Temporalio::Api::Common::V1::WorkflowExecution?

          # Serialized error returned by the system workflow performing the underlying operation.
          #
          attr_accessor workflow_error(): ::String

          def workflow_error!: () -> ::String?

          def initialize: (?workflow_execution: ::Temporalio::Api::Common::V1::WorkflowExecution::init?, ?workflow_error: ::String) -> void

          def []: (:workflow_execution) -> ::Temporalio::Api::Common::V1::WorkflowExecution?
                | (:workflow_error) -> ::String
                | (::Symbol) -> untyped

          def []=: (:workflow_execution, ::Temporalio::Api::Common::V1::WorkflowExecution?) -> ::Temporalio::Api::Common::V1::WorkflowExecution?
                 | [M < ::Temporalio::Api::Common::V1::WorkflowExecution::_ToProto] (:workflow_execution, M?) -> M?
                 | (:workflow_error, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> SystemWorkflowFailure
          end

          # The type of `#initialize` parameter.
          type init = SystemWorkflowFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[SystemWorkflowFailure, SystemWorkflowFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, SystemWorkflowFailure, SystemWorkflowFailure | _ToProto]

          type array = ::Array[SystemWorkflowFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, SystemWorkflowFailure | _ToProto]
        end

        class WorkflowNotReadyFailure < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (WorkflowNotReadyFailure) -> String

          def initialize: () -> void

          interface _ToProto
            def to_proto: () -> WorkflowNotReadyFailure
          end

          # The type of `#initialize` parameter.
          type init = WorkflowNotReadyFailure | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[WorkflowNotReadyFailure, WorkflowNotReadyFailure | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, WorkflowNotReadyFailure, WorkflowNotReadyFailure | _ToProto]

          type array = ::Array[WorkflowNotReadyFailure | _ToProto]

          type hash[KEY] = ::Hash[KEY, WorkflowNotReadyFailure | _ToProto]
        end
      end
    end
  end
end
