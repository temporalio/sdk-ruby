module Google
  module Protobuf
    # Wrapper message for `double`.
    #
    #  The JSON representation for `DoubleValue` is JSON number.
    #
    class DoubleValue < ::Protobuf::Message
      # Encode the message to a binary string
      #
      def self.encode: (DoubleValue) -> String

      # The double value.
      #
      attr_accessor value(): ::Float

      def value!: () -> ::Float?

      def initialize: (?value: ::Float) -> void

      def []: (:value) -> ::Float
            | (::Symbol) -> untyped

      def []=: (:value, ::Float) -> ::Float
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> DoubleValue
      end

      # The type of `#initialize` parameter.
      type init = DoubleValue | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[DoubleValue, DoubleValue | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, DoubleValue, DoubleValue | _ToProto]

      type array = ::Array[DoubleValue | _ToProto]

      type hash[KEY] = ::Hash[KEY, DoubleValue | _ToProto]
    end

    # Wrapper message for `float`.
    #
    #  The JSON representation for `FloatValue` is JSON number.
    #
    class FloatValue < ::Protobuf::Message
      # Encode the message to a binary string
      #
      def self.encode: (FloatValue) -> String

      # The float value.
      #
      attr_accessor value(): ::Float

      def value!: () -> ::Float?

      def initialize: (?value: ::Float) -> void

      def []: (:value) -> ::Float
            | (::Symbol) -> untyped

      def []=: (:value, ::Float) -> ::Float
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> FloatValue
      end

      # The type of `#initialize` parameter.
      type init = FloatValue | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[FloatValue, FloatValue | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, FloatValue, FloatValue | _ToProto]

      type array = ::Array[FloatValue | _ToProto]

      type hash[KEY] = ::Hash[KEY, FloatValue | _ToProto]
    end

    # Wrapper message for `int64`.
    #
    #  The JSON representation for `Int64Value` is JSON string.
    #
    class Int64Value < ::Protobuf::Message
      # The int64 value.
      #
      attr_accessor value(): ::Integer

      def value!: () -> ::Integer?

      def initialize: (?value: ::Integer) -> void

      def []: (:value) -> ::Integer
            | (::Symbol) -> untyped

      def []=: (:value, ::Integer) -> ::Integer
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> Int64Value
      end

      # The type of `#initialize` parameter.
      type init = Int64Value | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[Int64Value, Int64Value | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Int64Value, Int64Value | _ToProto]

      type array = ::Array[Int64Value | _ToProto]

      type hash[KEY] = ::Hash[KEY, Int64Value | _ToProto]
    end

    # Wrapper message for `uint64`.
    #
    #  The JSON representation for `UInt64Value` is JSON string.
    #
    class UInt64Value < ::Protobuf::Message
      # The uint64 value.
      #
      attr_accessor value(): ::Integer

      def value!: () -> ::Integer?

      def initialize: (?value: ::Integer) -> void

      def []: (:value) -> ::Integer
            | (::Symbol) -> untyped

      def []=: (:value, ::Integer) -> ::Integer
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> UInt64Value
      end

      # The type of `#initialize` parameter.
      type init = UInt64Value | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[UInt64Value, UInt64Value | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, UInt64Value, UInt64Value | _ToProto]

      type array = ::Array[UInt64Value | _ToProto]

      type hash[KEY] = ::Hash[KEY, UInt64Value | _ToProto]
    end

    # Wrapper message for `int32`.
    #
    #  The JSON representation for `Int32Value` is JSON number.
    #
    class Int32Value < ::Protobuf::Message
      # The int32 value.
      #
      attr_accessor value(): ::Integer

      def value!: () -> ::Integer?

      def initialize: (?value: ::Integer) -> void

      def []: (:value) -> ::Integer
            | (::Symbol) -> untyped

      def []=: (:value, ::Integer) -> ::Integer
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> Int32Value
      end

      # The type of `#initialize` parameter.
      type init = Int32Value | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[Int32Value, Int32Value | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, Int32Value, Int32Value | _ToProto]

      type array = ::Array[Int32Value | _ToProto]

      type hash[KEY] = ::Hash[KEY, Int32Value | _ToProto]
    end

    # Wrapper message for `uint32`.
    #
    #  The JSON representation for `UInt32Value` is JSON number.
    #
    class UInt32Value < ::Protobuf::Message
      # The uint32 value.
      #
      attr_accessor value(): ::Integer

      def value!: () -> ::Integer?

      def initialize: (?value: ::Integer) -> void

      def []: (:value) -> ::Integer
            | (::Symbol) -> untyped

      def []=: (:value, ::Integer) -> ::Integer
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> UInt32Value
      end

      # The type of `#initialize` parameter.
      type init = UInt32Value | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[UInt32Value, UInt32Value | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, UInt32Value, UInt32Value | _ToProto]

      type array = ::Array[UInt32Value | _ToProto]

      type hash[KEY] = ::Hash[KEY, UInt32Value | _ToProto]
    end

    # Wrapper message for `bool`.
    #
    #  The JSON representation for `BoolValue` is JSON `true` and `false`.
    #
    class BoolValue < ::Protobuf::Message
      # Encode the message to a binary string
      #
      def self.encode: (BoolValue) -> String

      # The bool value.
      #
      attr_accessor value(): bool

      def value!: () -> bool?

      def initialize: (?value: bool) -> void

      def []: (:value) -> bool
            | (::Symbol) -> untyped

      def []=: (:value, bool) -> bool
             | (::Symbol, untyped) -> untyped

      def value?: () -> bool

      interface _ToProto
        def to_proto: () -> BoolValue
      end

      # The type of `#initialize` parameter.
      type init = BoolValue | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[BoolValue, BoolValue | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BoolValue, BoolValue | _ToProto]

      type array = ::Array[BoolValue | _ToProto]

      type hash[KEY] = ::Hash[KEY, BoolValue | _ToProto]
    end

    # Wrapper message for `string`.
    #
    #  The JSON representation for `StringValue` is JSON string.
    #
    class StringValue < ::Protobuf::Message
      # Encode the message to a binary string
      #
      def self.encode: (StringValue) -> String

      # The string value.
      #
      attr_accessor value(): ::String

      def value!: () -> ::String?

      def initialize: (?value: ::String) -> void

      def []: (:value) -> ::String
            | (::Symbol) -> untyped

      def []=: (:value, ::String) -> ::String
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> StringValue
      end

      # The type of `#initialize` parameter.
      type init = StringValue | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[StringValue, StringValue | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, StringValue, StringValue | _ToProto]

      type array = ::Array[StringValue | _ToProto]

      type hash[KEY] = ::Hash[KEY, StringValue | _ToProto]
    end

    # Wrapper message for `bytes`.
    #
    #  The JSON representation for `BytesValue` is JSON string.
    #
    class BytesValue < ::Protobuf::Message
      # Encode the message to a binary string
      #
      def self.encode: (BytesValue) -> String

      # The bytes value.
      #
      attr_accessor value(): ::String

      def value!: () -> ::String?

      def initialize: (?value: ::String) -> void

      def []: (:value) -> ::String
            | (::Symbol) -> untyped

      def []=: (:value, ::String) -> ::String
             | (::Symbol, untyped) -> untyped

      interface _ToProto
        def to_proto: () -> BytesValue
      end

      # The type of `#initialize` parameter.
      type init = BytesValue | _ToProto

      # The type of `repeated` field.
      type field_array = ::Protobuf::Field::FieldArray[BytesValue, BytesValue | _ToProto]

      # The type of `map` field.
      type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BytesValue, BytesValue | _ToProto]

      type array = ::Array[BytesValue | _ToProto]

      type hash[KEY] = ::Hash[KEY, BytesValue | _ToProto]
    end
  end
end
