module Temporal
  class Client
    class Implementation
      def initialize: (
        Temporal::Connection connection,
        Symbol | String namespace,
        Temporal::Converter converter,
        Array[Temporal::Interceptor::Client] interceptors
      ) -> void

      def start_workflow: (Temporal::Interceptor::Client::StartWorkflowInput input) -> Temporal::Client::WorkflowHandle
      def describe_workflow: (Temporal::Interceptor::Client::DescribeWorkflowInput input) -> Temporal::Workflow::ExecutionInfo
      def query_workflow: (Temporal::Interceptor::Client::QueryWorkflowInput input) -> untyped
      def signal_workflow: (Temporal::Interceptor::Client::SignalWorkflowInput input) -> void
      def cancel_workflow: (Temporal::Interceptor::Client::CancelWorkflowInput input) -> void
      def terminate_workflow: (Temporal::Interceptor::Client::TerminateWorkflowInput input) -> void
      def await_workflow_result: (String id, String? run_id, bool follow_runs) -> untyped

      private

      attr_reader connection: Temporal::Connection
      attr_reader namespace: Symbol | String
      attr_reader converter: Temporal::Converter
      attr_reader interceptor_chain: Interceptor::Chain
      attr_reader identity: String

      def convert_headers: (Hash[Symbol | String, untyped]) -> Temporal::Api::Common::V1::Header?
      def handle_start_workflow: (Temporal::Interceptor::Client::StartWorkflowInput input) -> Temporal::Client::WorkflowHandle
      def handle_describe_workflow: (Temporal::Interceptor::Client::DescribeWorkflowInput input) -> Temporal::Workflow::ExecutionInfo
      def handle_query_workflow: (Temporal::Interceptor::Client::QueryWorkflowInput input) -> nil
      def handle_signal_workflow: (Temporal::Interceptor::Client::SignalWorkflowInput input) -> nil
      def handle_cancel_workflow: (Temporal::Interceptor::Client::CancelWorkflowInput input) -> nil
      def handle_terminate_workflow: (Temporal::Interceptor::Client::TerminateWorkflowInput input) -> nil
      def process_workflow_result_from: (Temporal::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse response, bool follow_runs) -> untyped
      def follow: (String?) -> void
    end
  end
end
