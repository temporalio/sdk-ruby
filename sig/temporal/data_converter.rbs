module Temporal
  class DataConverter
    class MissingPayload < Temporal::Error
    end

    def initialize: (
      ?payload_converter: Temporal::PayloadConverter::_PayloadConverter,
      ?payload_codecs: Array[Temporal::PayloadCodec::_PayloadCodec],
      ?failure_converter: Temporal::FailureConverter::_FailureConverter,
    ) -> void
    def to_payload: (untyped value) -> Temporal::Api::Common::V1::Payload
    def to_payload_array: (Array[untyped]? data) -> Array[Temporal::Api::Common::V1::Payload]
    def to_payloads: (Array[untyped]? data) -> Temporal::Api::Common::V1::Payloads?
    def to_payload_map: (Hash[String | Symbol, untyped] data) -> Hash[String, Temporal::Api::Common::V1::Payload]
    def to_failure: (Exception error) -> Temporal::Api::Failure::V1::Failure
    def from_payload: (Temporal::Api::Common::V1::Payload payload) -> untyped
    def from_payload_array: (Array[Temporal::Api::Common::V1::Payload] payloads) -> Array[untyped]
    def from_payloads: (Temporal::Api::Common::V1::Payloads? payloads) -> Array[untyped]?
    def from_payload_map: (Temporal::Api::Common::V1::Payload::field_hash[::String]? payload_map) -> Hash[String, untyped]?
    def from_failure: (Temporal::Api::Failure::V1::Failure? failure) -> Exception

    private

    attr_reader payload_converter: Temporal::PayloadConverter::_PayloadConverter
    attr_reader payload_codecs: Array[Temporal::PayloadCodec::_PayloadCodec]
    attr_reader failure_converter: Temporal::FailureConverter::_FailureConverter

    def value_to_payload: (untyped value) -> Temporal::Api::Common::V1::Payload
    def payload_to_value: (Temporal::Api::Common::V1::Payload payload) -> untyped
    def encode: (Array[Temporal::Api::Common::V1::Payload]?) -> Array[Temporal::Api::Common::V1::Payload]
    def decode: (Array[Temporal::Api::Common::V1::Payload]?) -> Array[Temporal::Api::Common::V1::Payload]
    def encode_failure: (Temporal::Api::Failure::V1::Failure failure) -> Temporal::Api::Failure::V1::Failure
    def decode_failure: (Temporal::Api::Failure::V1::Failure failure) -> Temporal::Api::Failure::V1::Failure
  end
end
