module Temporalio
  class Workflow
    class Context
      def initialize: (Temporalio::Worker::WorkflowRunner runner) -> void
      def async: -> singleton(Temporalio::Workflow::Async)
               | [T] { () -> T } -> Temporalio::Workflow::Future[T]
      def sleep: (Integer duration) -> void
      def start_timer: (Integer duration) -> Temporalio::Workflow::Future[nil]

      private

      attr_reader runner: Temporalio::Worker::WorkflowRunner
    end
  end
end
