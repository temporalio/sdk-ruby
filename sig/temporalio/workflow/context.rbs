module Temporalio
  class Workflow
    class Context
      def initialize: (
        Temporalio::Worker::WorkflowRunner runner,
        Temporalio::Workflow::Info info,
        Temporalio::Interceptor::Chain[Temporalio::Interceptor::WorkflowOutbound] interceptors,
      ) -> void
      def info: -> Temporalio::Workflow::Info
      def async: -> singleton(Temporalio::Workflow::Async)
               | [T] { () -> T } -> Temporalio::Workflow::Future[T]
      def sleep: (Integer duration) -> void
      def start_timer: (Integer duration) -> Temporalio::Workflow::Future[nil]

      private

      @info: Temporalio::Workflow::Info

      attr_reader runner: Temporalio::Worker::WorkflowRunner
      attr_reader interceptors: Temporalio::Interceptor::Chain[Temporalio::Interceptor::WorkflowOutbound]
    end
  end
end
