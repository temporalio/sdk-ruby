module Temporalio
  class Workflow
    class Future[T]
      class Rejected < StandardError
      end

      def initialize: { (^(T) -> void resolve, ^(Exception) -> void reject) -> void } -> void
      def then: { () -> untyped } -> void
      def pending?: -> bool
      def resolved?: -> bool
      def rejected?: -> bool
      def await: -> T?

      private

      @resolved: bool
      @rejected: bool

      attr_reader value: T?
      attr_reader error: Exception
      attr_reader blocked_fibers: Array[Fiber]
      attr_reader callbacks: Array[^() -> untyped]

      def run_callbacks: -> void
      def resume_fibers: -> void
      def resolve: (T value) -> void
      def reject: (Exception error) -> void
    end
  end
end
