module Temporalio
  module Interceptor
    class Chain[T < _PublicSend]
      type interceptor_methods =
        Temporalio::Interceptor::Client::methods |
        Temporalio::Interceptor::ActivityInbound::methods |
        Temporalio::Interceptor::ActivityOutbound::methods

      # NOTE: RBS is not smart enough to figure out which methods are callable per each interceptor
      #       class, so we're just allowing any of them to be called on any interceptor.
      interface _PublicSend
        def public_send: (interceptor_methods, *untyped) { (*untyped) -> untyped } -> untyped
      end

      def initialize: (?Array[T]) -> void
      # TODO: RBS fails to interpret the inline block defined in #invoke
      def invoke: (interceptor_methods, *untyped) { (*untyped) -> untyped } -> untyped

      private

      attr_reader interceptors: Array[T]
    end
  end
end
