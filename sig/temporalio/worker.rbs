module Temporalio
  class Worker
    type worker_interceptor =
      Temporalio::Interceptor::ActivityInbound |
      Temporalio::Interceptor::ActivityOutbound

    type interceptor_classes =
      singleton(Temporalio::Interceptor::ActivityInbound) |
      singleton(Temporalio::Interceptor::ActivityOutbound)

    def self.run: (
      *Temporalio::Worker workers,
      ?shutdown_signals: Array[String]
    ) ?{ -> void } -> void

    def initialize: (
      Temporalio::Connection connection,
      String namespace,
      String task_queue,
      ?activities: Array[singleton(Temporalio::Activity)],
      ?data_converter: Temporalio::DataConverter,
      ?activity_executor: Temporalio::Worker::_ActivityExecutor?,
      ?interceptors: Array[worker_interceptor],
      ?max_concurrent_activities: Integer,
      ?graceful_shutdown_timeout: Integer?
    ) -> void
    def run: ?{ -> void } -> void
    def start: (?Temporalio::Worker::Runner? runner) -> void
    def shutdown: (?Exception exception) -> void

    def started?: -> bool
    def running?: -> bool

    private

    @started: bool
    @shutdown: bool

    attr_reader mutex: Thread::Mutex
    attr_reader runtime: Temporalio::Runtime
    attr_reader activity_executor: Temporalio::Worker::_ActivityExecutor
    attr_reader core_worker: Temporalio::Bridge::Worker
    attr_reader activity_worker: Temporalio::Worker::ActivityWorker?
    attr_reader runner: Temporalio::Worker::Runner?
  end
end
