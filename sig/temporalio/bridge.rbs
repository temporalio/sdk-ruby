BRIDGE_DIR: String

class Rutie
  def initialize: (
    Symbol bridge,
    ?lib_path: String | Symbol,
    ?lib_suffix: String | Symbol,
    ?lib_prefix: String | Symbol
  ) -> void
  def init: (String, String) -> void
end

module Temporalio
  module Bridge
    class Error < StandardError
    end

    class Connection
      def self.connect: (Runtime, String) -> Temporalio::Bridge::Connection
      def call: (Symbol, Symbol, String, Hash[String, String], Integer?) -> String
    end

    class Runtime
      def self.init: () -> Temporalio::Bridge::Runtime
      def run_callback_loop: () -> void
    end

    class Worker
      def self.create: (Runtime, Connection, String, String, Integer) -> Temporalio::Bridge::Worker
      def poll_activity_task: { (String?, Exception?) -> void } -> void
      def complete_activity_task: (String) { (nil, Exception?) -> void } -> void
      def record_activity_heartbeat: (String) -> void
      def poll_workflow_activation: { (String?, Exception?) -> void } -> void
      def complete_workflow_activation: (String) { (nil, Exception?) -> void } -> void
      def initiate_shutdown: -> void
      def shutdown: -> void
    end

    class TestServer
      def self.start: (
        Temporalio::Bridge::Runtime runtime,
        String? existing_path,
        String sdk_name,
        String sdk_version,
        String download_version,
        String? download_dir,
        Integer? port,
        Array[String] extra_args
      ) -> Temporalio::Bridge::TestServer
      def self.start_temporalite: (
        Temporalio::Bridge::Runtime runtime,
        String? existing_path,
        String sdk_name,
        String sdk_version,
        String download_version,
        String? download_dir,
        String namespace,
        String ip,
        Integer? port,
        String? database_filename,
        bool ui,
        String log_format,
        String log_level,
        Array[String] extra_args
      ) -> Temporalio::Bridge::TestServer
      def has_test_service?: -> bool
      def target: -> String
      def shutdown: -> void
    end
  end
end
